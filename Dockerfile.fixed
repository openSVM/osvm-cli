# Multi-stage build for osvm CLI with DNS resolution fixes
FROM rust:1.87-slim AS builder

# Add DNS configuration to resolve network issues
RUN echo "nameserver 8.8.8.8" > /etc/resolv.conf && \
    echo "nameserver 8.8.4.4" >> /etc/resolv.conf && \
    echo "nameserver 1.1.1.1" >> /etc/resolv.conf

# Retry logic for apt-get update with fallback mirrors
RUN for i in 1 2 3; do \
        apt-get update && break || \
        (echo "Attempt $i failed, retrying..." && \
         echo "deb http://deb.debian.org/debian bookworm main" > /etc/apt/sources.list && \
         echo "deb http://security.debian.org/debian-security bookworm-security main" >> /etc/apt/sources.list && \
         sleep 2); \
    done

# Install dependencies for building
RUN apt-get install -y \
    pkg-config \
    libssl-dev \
    libudev-dev \
    perl \
    make \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy dependency files first for better caching
COPY Cargo.toml Cargo.lock ./
COPY rust-toolchain.toml ./

# Copy vendor directory if it exists
COPY vendor/ ./vendor/

# Copy source code
COPY src/ ./src/

# Copy templates directory (required by include_str! macros in audit_templates.rs)
COPY templates/ ./templates/

# Build the application
RUN cargo build --release

# Runtime image
FROM debian:bookworm-slim

# Add DNS configuration for runtime stage
RUN echo "nameserver 8.8.8.8" > /etc/resolv.conf && \
    echo "nameserver 8.8.4.4" >> /etc/resolv.conf && \
    echo "nameserver 1.1.1.1" >> /etc/resolv.conf

# Retry logic for runtime dependencies
RUN for i in 1 2 3; do \
        apt-get update && break || \
        (echo "Attempt $i failed, retrying..." && \
         echo "deb http://deb.debian.org/debian bookworm main" > /etc/apt/sources.list && \
         echo "deb http://security.debian.org/debian-security bookworm-security main" >> /etc/apt/sources.list && \
         sleep 2); \
    done

# Install runtime dependencies
RUN apt-get install -y \
    ca-certificates \
    libudev1 \
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -m -u 1000 osvm

# Copy the binary from builder stage
COPY --from=builder /app/target/release/osvm /usr/local/bin/osvm

# Make it executable
RUN chmod +x /usr/local/bin/osvm

# Switch to non-root user
USER osvm

# Set the entrypoint
ENTRYPOINT ["/usr/local/bin/osvm"]
CMD ["--help"]