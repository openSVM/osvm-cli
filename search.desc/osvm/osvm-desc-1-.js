searchState.loadedDescShard("osvm", 1, "Calls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this TEE type is available on current hardware\nKey ID within enclave\nMaximum enclave memory (MB)\nMeasurement (for attestation)\nMeasurement (hash of enclave code/data)\nGet human-readable name\nCreate a new TEE manager\nPublic key (can be shared)\nSeal data to enclave (encrypted storage)\nSealed storage directory\nSealed storage enabled\nSign data using key in enclave\nEnclave state\nGet statistics\nTEE type\nTEE type\nTEE technology type\nTimestamp\nUnseal data from enclave storage\nVerification result\nReserved CIDs\nvsock Context ID (CID)\nFirst port available for allocation (above well-known …\nFirst CID available for guest VMs\nHost CID constant\nvsock Port\nvsock address (CID + Port)\nvsock Connection\nvsock Listener\nvsock Manager - manages vsock connections between …\nvsock statistics\nAccept a connection\nNumber of active listeners\nAddress being listened on\nAllocate a CID for a component\nAllocate a port\nNumber of CIDs allocated\nContext ID (like IP address)\nClose connection\nComponent CID mappings\nConnect to a vsock address\nConnection state\nFree a CID (when component is stopped)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet CID for a component\nCreate address for host\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this is a valid guest address\nCreate a listener on a vsock address\nActive listeners\nGet the listening address\nLocal address\nCreate a new vsock manager\nCreate a new vsock address\nCID allocator state\nNext CID to allocate\nPort allocator state\nNext port to allocate\nPort number\nReceive data from vsock\nRemote address\nSend data over vsock\nvsock socket directory (for host-side Unix sockets)\nUnix socket path (host-side representation)\nGet statistics\nUnderlying Unix stream (fallback implementation)\n<code>ToString::to_string</code>, but without panic on OOM.\nKeybinding action types\nKey combination representation\nKeybinding configuration\nKeybinding manager for handling key events\nAdd custom command\nAdd Emacs-style keybindings\nAdd Vim-style keybindings\nAdd Alt modifier\nGet current configuration\nGet mutable configuration\nGet configuration file path\nAdd Ctrl modifier\nEnable Emacs-style keybindings\nEnable Vim-style keybindings\nExport keybindings to user-readable format\nFormat key combination as human-readable string\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet action for key combination\nGet custom command\nHandle special actions that affect the manager state\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs macro recording active?\nGet last recorded macro\nList all keybindings\nLoad keybinding configuration from file\nAdd Meta/Super modifier\nCreate new keybinding manager\nCreate a new key combination\nParse key combination from string (e.g., “Ctrl+C”, “…\nProcess key input and return associated action\nReload configuration from file\nRemove keybinding\nSave keybinding configuration to file\nSave current configuration\nAdd or update keybinding\nAdd Shift modifier\nConfiguration for local RPC node deployment\nInformation about a running local RPC node\nStatus information for local RPC node\nCheck the status of local RPC node\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate default OSVM ledger path for a given network and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart a local RPC node that syncs with real blockchain\nStop the local RPC node\nDetected issue with context\nFix result\nType of issue detected in logs\nLog monitor configuration\nLog pattern matcher\nLog monitor state\nSeverity level of detected issues\nApply fix for detected issue\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize log patterns for issue detection\nInstall ngrok automatically\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if ngrok is installed\nCreate a log file monitor that tails the file (like tail …\nMonitor logs continuously and apply fixes\nSetup ngrok tunnels for Solana validator ports\nKnown mainnet entrypoints\nConfiguration for mainnet RPC node deployment\nInformation about a running mainnet RPC node\nStatus information for mainnet RPC node\nCheck the status of mainnet RPC node\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart a mainnet RPC node\nStop the mainnet RPC node\nA markdown renderer for CLI output\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new markdown renderer with default styling\nRender markdown text to the terminal Note: termimad’s …\nRender markdown text and return as string (for testing)\nCreate a new markdown renderer with custom theme …\nDefault timeout for AI API calls\nDefault timeout for network operations\nDefault timeout for SSH operations\nRate limiter for preventing abuse\nSecure HTTP client with built-in timeouts and validation\nCheck if a request should be allowed\nRequest counters per endpoint\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum requests per window\nCreate a new rate limiter\nCreate a new secure HTTP client\nPerform a secure GET request with automatic retries and …\nPerform a secure POST request\nExecute an SSH command with timeout\nValidate SSH command to prevent injection attacks\nValidate URL to prevent SSRF attacks\nWait until rate limit allows the request\nTime window duration\nCreate a secure HTTP client with custom rate limiting\nExecute a function with timeout\nSort by creation time\nConfiguration for deploying a node\nError\nInvalid configuration\nIO error\nSort by name\nSort by network\nNode database\nNode error types\nNode information\nNode status\nSort by node type\nNode not found\nOther error\nRunning\nSerialization error\nSort order for node listing\nExtension trait for SshClient to add streaming capability\nSSH error\nSort by status\nStopped\nSort by SVM type\nSystem metrics for a node\nUnknown\nAdd a node to the database\nAdditional information\nAuthentication method\nCPU usage (percentage)\nCreation timestamp\nDeploy a new node\nDisk usage (percentage)\nDisplay detailed information about a node\nDisplay a list of nodes\nDisplay status information for a node\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all nodes\nGet a node from the database\nGet the path to the node database file\nGet node information\nGet node logs\nGet node status\nGet all nodes of a specific SVM type\nHost\nHost\nNode ID\nInstallation directory\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast updated timestamp\nList all nodes with optional filtering by network\nLoad the node database from disk\nNode name\nNode name\nNetwork type\nNetwork type\nNetwork in (kB/s)\nNetwork out (kB/s)\nCreate a new deploy node configuration with minimal …\nNode type (validator or RPC)\nNode type (validator or RPC)\nNodes\nPort\nProgress callback function\nRAM usage (percentage)\nRemove a node from the database\nRestart a node\nRPC URL (if applicable)\nRun the node monitoring dashboard\nSave the node database to disk\nSearch nodes by keyword\nSort nodes by specified criteria\nStart a node\nStatus\nStop a node\nStream a command, processing each line as it’s received\nSVM type\nSVM type\nSystem metrics (CPU, RAM, disk usage)\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nUpdate a node in the database\nSet authentication method\nSet host\nSet installation directory\nSet node name\nSet port\nSet progress callback\nGenerate HTML content for a monitoring dashboard\nOSVM Command Planner - creates and executes command plans\nResult of executing an OSVM command\nRepresents a single OSVM command to execute\nComplete execution plan with multiple OSVM commands\nArguments to pass to the command\nWhether the plan can be executed automatically\nBuild the AI prompt for command planning\nThe OSVM command to execute (e.g., “balance”, “svm …\nConfidence score (0.0 to 1.0)\nCreate an execution plan from a user query\nCreate a rule-based plan when AI is not available\nExecute a single OSVM command\nExecute an entire execution plan\nExpected final outcome\nExpected output description\nHuman-readable explanation of what this command does\nExtract JSON from AI response (handles cases where AI adds …\nFormat execution results for display\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFull command with arguments (e.g., “osvm balance”)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new command planner\nParse AI response into execution plan\nAI’s reasoning for this plan\nWhether this command requires user confirmation\nOrdered list of commands to execute\nTry to create a plan using AI\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of sensitive directories that should never be mounted\nList of system-critical directories requiring extra …\nValidated path with associated file descriptor for TOCTOU …\nCreate directory with specific permissions atomically\nCreate a secure socket directory with proper permissions\nExpand tilde (~) in paths securely\nGet the file descriptor (Unix only)\nFile descriptor for TOCTOU-safe operations (Unix only)\nReturns the argument unchanged.\nGenerate secure random socket name\nGet group GID\nCalls <code>U::from(self)</code>.\nCheck if path is a directory\nCheck if path is a file\nGet cached metadata\nCached metadata\nGet permissions mode\nGet owner UID\nGet the canonical path\nCanonicalized absolute path\nSafely validate and canonicalize a path with TOCTOU …\nValidate path is not a sensitive system directory\nValidate file permissions are secure\nAI plugins provide custom AI capabilities\nAccess to AI services\nAll permissions (dangerous)\nCommand plugins add new slash commands\nComposite plugins combine multiple functionalities\nAccess to user configuration\nBuilt-in example plugins Echo plugin - demonstrates basic …\nAccess to environment variables\nExecute system commands\nExternal plugin that executes scripts/binaries\nFilter plugins process input/output\nIntegration plugins connect to external services\nAccess to MCP servers\nNetwork access to specified hosts\nPlugin permissions system\nPlugin trait for dynamic behavior\nPlugin execution context\nPlugin installer for managing external plugins\nPlugin manager handles loading, lifecycle, and execution …\nPlugin metadata and configuration\nPlugin execution result\nTypes of plugins supported\nRead files from specified directories\nTheme plugins provide visual customizations\nTime plugin - shows current time with formatting options\nTool plugins provide new MCP-style tools\nWrite files to specified directories\nCheck if plugin can handle given input\nCleanup plugin resources\nGet configuration file path\nDisable plugin\nEnable plugin\nExecute plugin with given context\nExecute input through appropriate plugins\nExtract repository name from URL\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet available commands from all plugins\nGet plugin by name\nGet plugin health status\nHealth check all plugins\nInitialize plugin\nInstall plugin from GitHub repository\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList installed plugins\nList all registered plugins\nLoad plugin configuration\nLoad plugins from directory\nGet plugin manifest\nCreate new plugin manager\nGet plugins directory path\nRegister a plugin\nSave plugin configuration\nUninstall plugin\nInitialize with built-in plugins\nAnalysis vector types for specialized prompts\nAI prompt template structure\nMain template manager\nTemplate categories for different types of AI analysis\nTemplate collection for organizing related templates\nTemplate variable definition\nTypes of template variables\nAnalysis vector (if applicable)\nCollection author/maintainer\nTemplate category\nTemplates organized by category\nCreate default templates if none exist\nDefault value if not provided\nTemplate description\nVariable description\nCollection description\nWhether this template is enabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet best template for a specific use case\nGet default template definitions\nGet template by ID\nGet templates by category\nGet templates by analysis vector\nTemplate identifier\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all available templates\nLoad templates from a directory\nLoad a single template file\nAdditional metadata\nHuman-readable name\nVariable name (without braces)\nCollection name\nRebuild category and vector indices\nReload templates from all configured directories\nRender a template with provided variables\nWhether this variable is required\nSave template to file\nThe actual prompt template with placeholders\nTemplate directories to watch for changes\nLoaded templates by ID\nTemplates in this collection\nValidate template syntax\nVariable type hint\nVariables used in the template\nTemplates organized by analysis vector\nTemplate version for compatibility\nCollection version\nGeneric RPC Bridge Tool - Dynamically calls ANY Solana RPC …\nCreate a tool registry with RPC bridge tools\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTUI buffer containing screen content for rendering\nA single cell in the TUI buffer\nCrop screenshot to show only the chat UI area\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender TUI buffer to image\nTake a screenshot of the current terminal window\nTake a screenshot with optional chat UI cropping\nTake a screenshot of the TUI by rendering content to image\nTry to use gnome-screenshot (GNOME desktop)\nTry to use ImageMagick’s import command (most reliable)\nTry to use scrot (simple screenshot tool)\nTry to use spectacle (KDE screenshot tool)\nFallback: create a simple informational image\nCheck if a command exists on the system\nPatterns that should be redacted from logs\nSecure logger that automatically redacts sensitive …\nLog a debug message (only in debug mode) with sanitization\nLog raw data with extra sanitization for debugging\nLog an error message with automatic sanitization\nReturns the argument unchanged.\nReturns the argument unchanged.\nLog an info message with automatic sanitization\nInitialize the global secure logger\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new secure logger\nSanitize a string to remove sensitive information\nLog a success message with automatic sanitization\nLog a warning message with automatic sanitization\nGet a reference to the global secure logger\nDisk information\nManual fix suggestion\nMemory information\nRisk level for manual fixes\nSecure system operations manager\nSystem status information\nCheck network connectivity without sudo\nSecurely check system configuration without escalating …\nCheck write permissions for a directory\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet configuration directory\nGet data directory\nGet disk information without sudo\nGet memory information without sudo\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new secure system manager\nParse a line from /proc/meminfo\nParse size string to GB\nAttempt to create necessary directories without sudo\nAlternative to sudo operations - provide user guidance\nNetwork connectivity problems\nPermission-related errors\nConfiguration for repair operations\nMain error type for self-repair operations\nResult of a repair operation\nTypes of errors that can be automatically repaired\nRollback operation failures\nMain self-repair orchestrator\nSystem-level dependency issues\nUnknown or unexpected errors\nUser-level dependency issues\nSnapshot operation failures - REMOVED Validation failures\nAdd repair operation based on error type\nWhether to perform system-level repairs\nWhether to perform user-level repairs\nAnalyze an error and determine if it can be automatically …\nCheck if config directory exists\nExtract keypair path from error message\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet OSVM-specific keypair path (NEVER uses ~…\nWhether to prompt user for confirmation before repairs\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if Solana CLI is installed\nCreate a new self-repair system\nCross-platform package manager support\nConvenience function to handle keypair reading with …\nAttempt to repair the detected issues automatically\nRepair execution strategies and transaction management\nSystem-level dependency management\nAutomatically create snapshots before repairs - REMOVED …\n<code>ToString::to_string</code>, but without panic on OOM.\nUser-level dependency management\nValidate that repairs were successful\nCreate a new self-repair system with default configuration\nDebian/Ubuntu package manager\nWindows package manager\nFedora/RHEL 8+ package manager\nUniversal Linux package manager\nmacOS package manager\nSupported package managers\nPackage manager operation error\nPackage manager operations\nArch Linux package manager\nUniversal Linux package manager\nRHEL/CentOS legacy package manager\nDetect the primary package manager on the current system\nGet all available package managers on the system\nExecute a command and return the output\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet system-specific build dependencies\nInstall specific packages\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this package manager is available on the system\nCheck if package is installed\nList available updates\nGet platform-specific package mappings\nGet package manager name\n<code>ToString::to_string</code>, but without panic on OOM.\nUpdate package database\nUpgrade all packages\nCheckpoint information for rollback\nRepair operation types\nRepair strategy error\nRepair transaction with atomic operations and rollback\nTransaction state\nAdd a repair operation to the transaction\nBegin the transaction\nCapture state data for rollback\nCommit the transaction\nCreate a checkpoint before an operation\nCreate a system snapshot\nExecute the transaction with automatic rollback on failure\nExecute a single repair operation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle transaction timeout\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this operation is critical (must succeed)\nManual rollback for operations without snapshots\nCreate a new repair transaction\nReverse a specific operation\nRollback the transaction to the last known good state\nSet transaction timeout\nSort operations by dependency order to prevent execution …\n<code>ToString::to_string</code>, but without panic on OOM.\nApply system tuning parameters for Solana\nValidate an operation was successful\nValidate that rollback was successful\nValidate system health\nValidate user configuration\nInformation about a system dependency\nSystem dependency checker and installer\nSystem dependency error\nCheck all system dependencies\nCheck Rust toolchain status\nCheck for Rust updates\nCheck if Solana CLI is installed\nCheck system package status\nCheck if system has pending updates\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet package manager information\nGet current Rust version\nGet Solana CLI version if installed\nInstall system build dependencies\nInstall or update Rust toolchain\nInstall Solana CLI\nInstall specific system dependencies\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if Rust is installed\nCheck if rustup is installed\nCreate a new system dependency manager\n<code>ToString::to_string</code>, but without panic on OOM.\nUpdate system packages\nSolana configuration information\nUser dependency manager\nUser dependency error\nCheck all user-level dependencies\nCheck if config directory exists\nSet Solana configuration\nCreate OSVM configuration directory (NOT Solana’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new Solana keypair (OSVM-specific paths only!)\nGet current Solana network configuration\nGet the default OSVM keypair path (NOT Solana’s path!) …\nGet keypair path from Solana config file\nGet OSVM configuration directory\nGet public key from a keypair file\nGet Solana CLI version\nGet Solana configuration directory\nInstall Solana CLI using the official installer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if Solana CLI is installed\nCreate a new user dependency manager\nSet keypair path in Solana configuration\nCreate a complete Solana setup (config directory + keypair …\n<code>ToString::to_string</code>, but without panic on OOM.\nValidate existing Solana configuration\nStart a simple HTTP proxy server for devnet RPC\nTest if devnet RPC is accessible\nNetwork health information\nReal-time network statistics\nSolana network endpoints\nConnect to Solana RPC and get network health\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current network statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMonitor network activity in real-time\nDisplay network information\nAuthentication error\nAuthentication method\nCommand execution error\nConfiguration error\nConnection error\nDeployment configuration\nDeployment error types\nDeployment error\nDevnet\nDisk configuration for Solana validator/RPC\nFile transfer error\nConfiguration error\nIO error\nSSH key authentication\nMainnet\nNetwork type\nNode type (validator or RPC)\nOther error\nPassword authentication\nServer connection parameters\nSSH client for interacting with remote servers\nSSH error\nTestnet\nValidation error\nAccounts disk device path (e.g., “/dev/nvme1n1”)\nAdditional config parameters\nApply recommended system optimizations for Solana …\nAuthentication method\nWait for a service to start\nSSH client implementation for remote server operations\nSolana client type (standard, jito, agave, firedancer, sig)\nServer config\nConfigure firewall settings for Solana validator/RPC\nConfigure hot-swap capability for Solana validator\nCreate a log rotation configuration for Solana validator\nWhether the session is connected\nConnection timeout in seconds (default: 30)\nCreate a service content for a binary-based service\nCreate a service content for a Docker-based service\nCreate and install a systemd service\nDeploy Eclipse node\nDeploy a node to a remote server\nDeploy s00n node\nDeploy Solana node with enhanced features from Validator …\nDeploy Sonic node\nDeploy a new SVM node to a remote server\nSVM deployment implementations\nDisk configuration for dedicated storage\nDisk management utilities for Solana validator/RPC …\nEclipse SVM deployment implementation\nEnable and start a systemd service\nEnable a systemd service without starting it\nError definitions for SSH deployment\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHost\nHot-swap capability for Solana validators\nEnable hot-swap capability\nInstall dependencies on the remote server\nInstallation directory\nInstall Docker and Docker Compose if needed\nInstall Grafana and InfluxDB monitoring stack (optional)\nInstall Node.js if needed\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLedger disk device path (e.g., “/dev/nvme0n1”)\nMetrics configuration\nMonitoring and metrics utilities for Solana validator/RPC …\nNetwork type\nNode name\nNode type (validator or RPC)\nSystem optimization utilities for Solana validator/RPC …\nPort\nRPC URL\ns00n SVM deployment implementation\nService management utilities for SSH deployment\nSSH session\nSet up disk storage for Solana validator/RPC\nSet up log rotation for Solana validator\nSet up monitoring for Solana validator/RPC\nSolana deployment implementation\nSonic deployment implementation\nSVM type (e.g., “solana”, “sonic”)\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nType definitions for SSH deployment\nValidate disk requirements for Solana validator/RPC\nValidate a hostname/IP address\nValidate a package name (Debian/RPM package naming …\nValidate a port number\nValidate a remote file/directory path\nValidate a service name\nValidate system requirements for deployment\nInput validation utilities for SSH deployment operations\nSolana client version\nPath to private key\nPrivate key passphrase (if any)\nPassword\nUsername\nUsername\nSSH client for interacting with remote servers\nClose the SSH connection\nServer config\nConnect to the server\nWhether the session is connected\nCreate a directory on the remote server\nCheck if a directory exists on the remote server\nEscape a shell argument to prevent command injection\nExecute a command on the remote server\nCheck if a file exists on the remote server\nGet disk and kernel information\nGet OS information\nGet system information from the remote server\nCheck if a package is installed on the remote server\nCreate a new SSH client\nSSH session\nUpload a file to the remote server (part 1: setup)\nUpload file content (part 2: content transfer)\nValidate host input to prevent injection attacks\nValidate port number\nInstall common dependencies\nInstall dependencies on the remote server\nInstall Docker and Docker Compose if needed\nInstall Node.js if needed\nInstall Rust if needed\nInstall SVM-specific dependencies\nDeploy a node to a remote server\nDeploy a new SVM node to a remote server\nEclipse SVM deployment implementation\ns00n SVM deployment implementation\nSolana deployment implementation\nSonic deployment implementation\nBuild Eclipse binary\nClone the Eclipse repository\nCreate Eclipse configuration\nCreate Eclipse service\nDeploy Eclipse node\nGet Eclipse service arguments\nBuild s00n binary\nClone the s00n repository\nCreate s00n configuration\nCreate s00n service\nDeploy s00n node\nGet s00n service arguments\nConfigure Solana network\nCreate Solana service\nDeploy Solana node with enhanced features from Validator …\nGenerate Solana keypair\nGet Solana service arguments\nInstall Solana CLI with version selection\nClone the Sonic repository\nConfigure Sonic network settings\nDeploy Sonic node\nInstall Sonic dependencies\nStart the Sonic node\nCreate necessary mount directories\nCheck if a disk exists\nFormat and mount a disk\nGet disk size in GB\nSet up disk storage for Solana validator/RPC\nValidate disk requirements for Solana validator/RPC\nDeploy Eclipse node\nAuthentication error\nCommand execution error\nConfiguration error\nConnection error\nDeployment error types\nDeployment error\nFile transfer error\nConfiguration error\nIO error\nOther error\nSSH error\nValidation error\nConfigure hot-swap capability for Solana validator\nCreate a log rotation configuration for Solana validator\nCreate script for identity transition between staked and …\nSet up monitoring for automatic failover\nConfigure Solana metrics environment\nInstall Grafana and InfluxDB monitoring stack (optional)\nSet up alert system for critical issues\nSet up basic monitoring script\nSet up monitoring for Solana validator/RPC\nApply recommended sysctl settings for Solana\nApply recommended system optimizations for Solana …\nConfigure file descriptor limits\nConfigure firewall settings for Solana validator/RPC\nSet CPU governor to performance mode\nSet up log rotation for Solana validator\nDeploy s00n node\nWait for a service to start\nCreate a service content for a binary-based service\nCreate a service content for a Docker-based service\nCreate and install a systemd service\nEnable and start a systemd service\nEnable a systemd service without starting it\nEscape a service name to prevent shell injection\nDeploy Solana node with enhanced features from Validator …\nDeploy Sonic node\nAuthentication method\nDeployment configuration\nDevnet\nDisk configuration for Solana validator/RPC\nSSH key authentication\nMainnet\nNetwork type\nNode type (validator or RPC)\nPassword authentication\nServer connection parameters\nTestnet\nAccounts disk device path (e.g., “/dev/nvme1n1”)\nAdditional config parameters\nAuthentication method\nSolana client type (standard, jito, agave, firedancer, sig)\nConnection timeout in seconds (default: 30)\nDefault connection timeout (30 seconds)\nDisk configuration for dedicated storage\nCreate a ServerConfig from a connection string (user@host[…\nHost\nEnable hot-swap capability\nInstallation directory\nLedger disk device path (e.g., “/dev/nvme0n1”)\nMetrics configuration\nNetwork type\nNode name\nNode type (validator or RPC)\nPort\nRPC URL\nSVM type (e.g., “solana”, “sonic”)\nValidate username to prevent injection attacks\nSolana client version\nPath to private key\nPrivate key passphrase (if any)\nPassword\nUsername\nUsername\nValidate a hostname/IP address\nValidate a package name (Debian/RPM package naming …\nValidate a port number\nValidate a remote file/directory path\nValidate a service name\nValidate system requirements for deployment\nGeneric RPC Bridge Tool - Dynamically calls ANY Solana RPC …\nMake a JSON-RPC call to the Solana RPC endpoint\nExecute agent command with real-time streaming output to …\nExecute a tool with streaming output - using REAL RPC for …\nExtract OVSM code from markdown-formatted AI response …\nFix AI-generated OVSM syntax to match actual OVSM language …\nFormat plan execution results into a readable summary\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert JSON Value to OVSM Value\nConvert OVSM Value to JSON Value\nPrint tool result with formatting\nNetwork error\nNetwork information\nSVM not found\nOther error\nRPC node information\nSVM error types\nDetailed SVM information\nSystem requirements\nBandwidth in Mbps\nBlock height\nWhether this SVM can be installed as an RPC node\nWhether this SVM can be installed as a validator\nCPU cores\nCurrent TPS\nDescription\nSVM display name\nDisplay detailed information about a specific SVM\nDisplay a list of all SVMs\nDocumentation URL\nEstimated monthly cost (USD)\nExplorer URL\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet information about a specific SVM\nGitHub URL\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is an official RPC\nGet information about all SVMs\nLocation\nLogo URL\nNetwork name (mainnet, testnet, devnet)\nSVM name\nNetwork information\nRAM in GB\nRecommended cloud instance type\nResponse time (ms)\nAvailable RPC nodes\nSystem requirements for running an RPC node\nStaked tokens\nStorage in GB\nCurrent price in USD\nToken symbol\nTotal supply\nTPS (transactions per second)\n<code>ToString::to_string</code>, but without panic on OOM.\nURL of the RPC node\nNumber of validators\nSystem requirements for running a validator\nNetwork version\nWebsite\nAnimation effects\nGradient builder for smooth color transitions\nProgress bar builder\nStatus indicator with icon and color\nStyled box builder for modern UI components\nModern color palette with RGB and gradient support\nApply gradient to text\nFade in effect using color intensity\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLinear interpolation helper\nCreate a gradient between two RGB colors\nPulse effect for highlighting\nPreset gradients\nCreate a modern progress bar\nCreate a box with rounded corners\nTypewriter effect for text\nCreate a box with shadow effect (using dimmed duplicate)\nAnimation configuration\nColor definition with support for 256-color and RGB\nHex color code\nHSL color values (hue: 0-360, saturation: 0-100, …\n256-color palette (0-255)\nLayout configuration\nNamed ANSI colors\nRGB color values\nText styling options\nComplete theme configuration\nTheme manager for runtime theme switching\nAdd custom style\nApply style to text\nGet available theme names\nGet theme preference config path\nGet current theme\nCreate default dark theme (Claude Code style)\nCreate light theme\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet style by name\nCreate high contrast theme (accessibility)\nUtility functions for color conversion\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList available themes\nLoad theme from file\nLoad preferred theme from config\nCreate new theme manager\nCreate theme preview\nRefresh available themes list\nCreate a reset sequence\nCreate retro/vintage theme\nSave theme to file\nSave theme preference\nSwitch to theme by name\nGet theme file path\nConvert color to ANSI escape sequence\nConvert style to ANSI escape sequence\nConvert color to background ANSI escape sequence")