searchState.loadedDescShard("osvm", 0, "OSVM CLI Library\nCommand modules for OSVM CLI\nError print macro\nDebug print macro with verbosity control\nSuccess print macro\nWarning print macro\nExports key capabilities in a single module for convenient …\nMacro for creating secure error boundaries\nSecure logging macros\nUtility modules for the OSVM CLI\nMacro for circuit breaker protected operations\nDatabase (ClickHouse) command definition\nMCP (Model Context Protocol) server management command …\nOVSM (Open Versatile Seeker Mind) language interpreter …\nConstruct the cli input model and parse command line\nSnapshot management command definition\nTutorial command builder\nBuild the agent command\nBuild the audit command\nBuild the balance command\nBuild the chat command\nBuild the deploy command\nBuild the doctor command\nBuild the examples command\nBuild the mount command\nBuild the nodes management command\nBuild the plan command\nBuild the realtime command\nBuild the RPC management command\nBuild the SVM management command\nDatabase management commands\nMount management commands for OSVM and MCP tools\nReal-time blockchain data sync daemon\nRPC command handlers\nSnapshot management and analysis commands for OSVM CLI\nInteractive tutorial system for OSVM CLI\nHandle regular AI query (without OVSM planning)\nHandle AI query with OVSM planning enabled (for …\nCheck if input looks like a natural language query rather …\nSanitize user input to prevent command injection and …\nHandle the audit command using the dedicated audit service\nDatabase command arguments\nShow activity logs\nInitialize ClickHouse database\nExecute a SQL query\nStart ClickHouse server\nCheck ClickHouse server status\nStop ClickHouse server\nSync blockchain data to ClickHouse\nExecute database command\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValidate SQL query to prevent injection attacks\nHandle MCP commands using the dedicated MCP service\nHandle MCP microVM subcommands\nLaunch multiple MCP servers for load testing\nLaunch a single MCP server in a microVM\nShow status of running MCP microVMs\nStop a running MCP microVM\nTest MCP microVM integration\nMount information\nMount manager for OSVM and MCP tools\nMounts configuration\nAdd mount for MCP tool\nAdd mount for OSVM microVM\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate tool path for MCP mount\nGenerate VM path for OSVM mount\nGet configuration file path\nHandle ‘osvm mcp mount’ command\nHandle ‘osvm mcp mounts’ command\nHandle ‘osvm mcp unmount’ command\nHandle ‘osvm mount add’ command\nHandle ‘osvm mount list’ command\nHandle ‘osvm mount remove’ command\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all MCP tool mounts\nList mounts for MCP tool\nList OSVM mounts\nLoad configuration from file\nCreate new mount manager\nRemove mount for MCP tool\nRemove mount for OSVM microVM\nSave configuration to file\nValidate and canonicalize host path using secure validation\nValidate that an MCP tool exists in the configuration\nHandle OVSM command for script execution and management\nHandle QA command for automated testing and bug detection\nReal-time daemon arguments\nStart real-time sync daemon\nCheck real-time sync daemon status\nStop real-time sync daemon\nExecute realtime command\nReturns the argument unchanged.\nGet PID file path\nCalls <code>U::from(self)</code>.\nCheck if daemon is running\nFallback polling mode when ledger monitoring is not …\nRun the real-time sync daemon (internal entry point)\nValidate daemon argument to prevent injection attacks\nValidate path argument for daemon\nHandle devnet RPC command\nHandle local RPC\nHandle Solana network queries\nHandle all rpc commands\nHandle sonic RPC deployment\nHandle test validator\nCompare two snapshots\nExecute snapshot-related commands\nExport snapshot to various formats\nFind specific account by pubkey\nLaunch interactive TUI mode\nRead and display snapshot accounts\nShow snapshot statistics\nValidate snapshot integrity\nTutorial progress tracker\nTutorial step structure\nCheck if OSVM is installed\nClear screen\nCreate ASCII progress bar\nCreate all tutorial steps\nExecute command safely (prevent shell injection)\nExecute a single tutorial step\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet user choice (Enter or ‘s’ to skip)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMain tutorial entry point\nShow completion certificate\nShow step header with progress\nShow welcome banner\nWait for user to press Enter\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValidate configuration values to ensure they are …\nType alias for progress callback functions\nAccount data decoders for known Solana programs\nActivity logging service for CLI commands and chat messages\nBlockchain data indexer for syncing RocksDB and snapshots …\nComprehensive Chat UI Test Scenarios\nClickHouse database service for storing and querying …\nEphemeral MicroVM launcher for running MCP tools in …\nIsolation configuration for MCP tools and unikernel …\nLedger database access for reading transaction history\nMicroVM launcher for running OSVM runtime in isolated …\nOVSM Service - Integration layer for the OVSM language …\nQA Agent Service - Automated testing and bug reporting for …\nManual binary parser for Solana RocksDB transaction format\nComprehensive snapshot analysis and management service\nTransaction instruction decoders for all 68+ Solana …\nTUI Visual Testing Agent\nUnikernel runtime for executing MCP tools in isolated …\nVisual Layout Validator for TUI Testing\nMain decoder trait\nAddress Lookup Table Decoder\nBPF Upgradeable Loader Decoder\nCandy Machine Decoder\nDecoded account data variants\nDecoder registry for managing all decoders\nSPL Governance Decoder\nMemo Program Decoder\nMetaplex Token Metadata Decoder\nName Service Decoder\nSystem Program Nonce Decoder\nOrca Whirlpool Decoder\nPyth Oracle Decoder\nRaydium AMM Decoder\nSerum Market Decoder\nSPL Token Account Decoder\nSPL Token Mint Decoder\nStake Account Decoder\nSwitchboard Decoder\nVote Account Decoder\nHelper function to format decoded account for display\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nActivity logger service\nBuffer size before flushing to database\nChat message log entry\nCLI command log entry\nEscape SQL string values\nFlush all buffers\nFlush chat message buffer to database\nFlush command buffer to database\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet activity statistics\nGet a unique session ID for this osvm process\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if activity logging is enabled\nLog a chat message\nLog a CLI command\nCreate a new activity logger\nQuery chat message history\nQuery CLI command history\nEnable or disable activity logging\nValidate limit parameter to prevent SQL injection\nEnhanced tool plan structure for better planning\nTool planning structures\nEnhanced DeepLogic analysis with configurable templates\nBuild OVSM planning prompt with tools context\nCreate a refinement prompt from OVSM execution error\nCreate a semantic refinement prompt when code runs but …\nPlan which tools to use for a given user request using …\nEnsure default templates exist in user config directory\nExtract attribute value from XML tag\nExtract XML section content\nExtract value from XML tag\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a contextual response based on tool results\nGet the OVSM system prompt for plan generation (V3 - …\nGet the templates directory path\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if an OVSM error is retryable (can be fixed by AI)\nCheck if an error is a timeout that should be retried\nParse args XML section to JSON\nParse AI response as JSON tool plan\nParse OSVM plan XML format\nParse OVSM-formatted plan\nParse AI response into structured ToolPlan from OSVM XML …\nInternal API call without retry logic\nAttempt to salvage a tool plan from non-standard / …\nValidate if OVSM result matches the expected outcome …\nRetry an API call with exponential backoff on timeout …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nBlockchain indexer service\nCustom configuration with filters\nIndex all historical data\nIndexing configuration with filters\nIndexing mode configuration\nIndex only the last N days\nStart fresh, index only new data going forward\nSync arguments for CLI commands\nCheck if data matches a byte pattern\nEscape SQL string values\nFormat instruction data as JSON array string\nFormat transaction accounts as JSON array string\nFormat transaction logs as JSON array string\nFormat transaction program IDs as JSON array string\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a batch of accounts into ClickHouse (placeholder)\nInsert a batch of transactions into ClickHouse\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new blockchain indexer\nParse sync arguments into indexing configuration\nRead account data from snapshot file\nSanitize identifier to prevent SQL injection Removes any …\nCheck if account should be filtered based on indexing …\nCheck if transaction should be filtered based on indexing …\nSync account data from snapshot to ClickHouse\nSync transaction data from ledger to ClickHouse\nValidate account file path to prevent path traversal …\nCreate comprehensive test scenarios for advanced chat UI\nCreate comprehensive test scenarios for basic chat UI\nCreate visual layout validation scenarios\nGet all test scenarios combined\nClickHouse service configuration\nClickHouse service for managing the database process\nClickHouse service status\nGet the client for direct access\nCreate database schema (tables)\nDownload ClickHouse binary\nExecute a SQL query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate ClickHouse configuration file\nGet the ClickHouse binary path\nInitialize ClickHouse: download binary if needed and set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if ClickHouse binary is installed\nCheck if the server is ready to accept connections\nCreate a new ClickHouse service with default configuration\nExecute a SQL query and return results as JSON\nStart the ClickHouse server process\nGet the current status of the ClickHouse server\nStop the ClickHouse server process\nCreate a new ClickHouse service with custom configuration\nMain chat microVM orchestrator\nDefault CPU count for ephemeral VMs\nDefault memory allocation for ephemeral VMs (MB)\nDefault timeout for tool execution in seconds\nEphemeral MicroVM configuration\nHandle to a running ephemeral microVM\nEphemeral MicroVM Manager\nGuest VM IP address (fixed by network configuration)\nMaximum concurrent ephemeral VMs\nNext available vsock CID (starts at 3, reserves 0-2) - …\nTCP port for tool communication (must match …\nActive ephemeral VMs\nSocket path for API\nHandle to the persistent chat VM\nCleanup all active VMs (for shutdown)\nCleanup TAP device\nCleanup a VM\nVM configuration\nNumber of CPUs\nCreate Firecracker VM configuration\nWhether to enable debug logging\nDebug mode flag\nDebug mode flag\nEnsure Firecracker binary has necessary network …\nAdditional environment variables\nEphemeral VM manager for tools\nExecute a tool in an ephemeral VM\nExecute tool in the VM via TCP\nFirecracker process\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the VM ID\nUnique ID for this ephemeral VM\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKernel image path\nVM launch semaphore to limit concurrent VMs\nLaunch an ephemeral VM for tool execution\nMemory allocation in MB\nCreate a new ephemeral VM manager\nCreate a new chat VM orchestrator\nRead tool response from TCP stream (length-prefixed)\nRootfs image path\nMCP server command to execute\nServer ID this tool belongs to\nSetup TAP device for VM networking\nSpawn an ephemeral microVM\nStart the main chat VM\nStart time for tracking\nStop the chat VM and cleanup\nTAP device name for networking\nTemporary directory for VM files\nKill the VM and cleanup resources\nTimeout for tool execution\nTool name being executed\nGet the vsock CID\nvsock CID for this VM\nWait for VM to be ready\nExecution mode for MCP tools\nRoot isolation configuration\nExecute tool directly in microVM (Firecracker - preferred …\nResource configuration for MCP server microVMs\nMount configuration for filesystem access\nConfiguration for an MCP server\nConfiguration for a specific MCP tool\nExecute tool in ephemeral unikernel (high security, ~100ms …\nCreate a default configuration with example entries\nDefault execution mode for tools without specific config\nHow this tool should be executed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the path to the isolation config file\nGet server configuration\nGet configuration for a specific tool\nPath on the host system\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad isolation configuration from file\nPer-server configuration\nMemory limit in MB for unikernel\nMemory allocation in MB\nResource configuration for the server’s microVM (if …\nMicroVM ID where this server runs\nMounts available to the microVM (server level)\nFilesystem mounts available to this tool\nWhether the mount is read-only\nSave isolation configuration to file\nCommand to run the MCP server (used when use_microvm is …\nCheck if a tool should use unikernel execution\nPer-tool configuration\nDirectory where unikernel images are stored\nPath to the unikernel image (if execution_mode is …\nWhether to run this server in a dedicated microVM (Phase …\nNumber of vCPUs for unikernel\nNumber of vCPUs\nPath inside the VM/unikernel\nLedger service for accessing transaction history\nDetect if a new slot has appeared (helper function)\nDisplay transaction information\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current slot from ledger by scanning the database\nGet transaction by signature with full decoding\nGet transaction count in ledger\nCheck if ledger has RocksDB database (required for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList available column families in the database\nOpen RocksDB database with column families\nStream transactions for a specific address\nStream transactions in slot range\nWatch for new blocks/slots using filesystem watchers for …\nMCP client capabilities\nMCP client information\nHTTP REST API transport\nAuthentication configuration for MCP servers\nMCP-specific error types for better error handling\nMCP initialization request\nMCP JSON-RPC error structure\nMCP JSON-RPC request structure\nMCP JSON-RPC response structure\nConfiguration for an MCP server endpoint\nService for managing MCP (Model Context Protocol) server …\nTool definition from MCP server\nTransport types supported by MCP servers\nStandard I/O transport (local processes)\nStdio process manager for MCP servers\nWebSocket transport for real-time data\nAdd or update an MCP server configuration\nAdd MCP server from GitHub URL\nAuthentication configuration if required\nAuthentication method (bearer, api_key, basic)\nCall a tool on an MCP server\nCall a tool on an HTTP/WebSocket MCP server\nCall a tool on a stdio-based MCP server\nCall a tool in an isolated unikernel\nCall a tool via dedicated microVM handle\nCircuit breaker for managing failed requests\nCleanup all resources (stdio processes and microVMs)\nCleanup stdio processes for graceful shutdown\nHTTP client for making requests\nConfirm build execution for projects with potentially …\nConfirm GitHub clone operation with user\nCheck if string contains shell metacharacters\nCreate an authenticated HTTP request builder\nDebug mode flag\nWhether this server is currently enabled\nEphemeral VM manager for tool execution\nAdditional configuration specific to the server\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet binary name from Cargo.toml with proper TOML parsing\nGet package info from package.json for npm-based MCP …\nGet a specific MCP server configuration\nGet the status information of configured MCP servers\nGitHub repository URL (if cloned from GitHub)\nInitialize default MCP servers on first run This ensures …\nInitialize HTTP-based MCP server\nInitialize connection with an MCP server\nInitialize MCP server in a dedicated microVM\nInitialize Stdio-based MCP server\nInitialize WebSocket-based MCP server\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a line looks like a structured log message rather …\nValidate GitHub URL with strict parsing to prevent command …\nIsolation configuration for unikernel execution\nList all configured MCP servers\nList available tools from an MCP server\nList tools from HTTP-based MCP server\nList tools from stdio-based MCP server\nLoad MCP server configurations from environment or config …\nLoad MCP server configurations from environment variables\nLoad configurations from JSON file\nSecurely load MCP server configurations from specific …\nLocal path to cloned repository (for stdio transport)\nActive MCP server microVMs\nMicroVM launcher for spawning isolated MCP servers\nHuman-readable name for the MCP server\nCreate a new MCP service instance\nCreate a new MCP service with debug mode enabled\nGenerate next request ID with overflow protection\nSimple fallback parsing for package name\nPassword for basic auth\nCentralized error printing helper\nQuery multiple MCP servers with the same request\nRead and filter MCP protocol response from mixed stdout …\nRemove an MCP server configuration\nRequest counter for JSON-RPC ID generation\nSave configurations to JSON file\nSearch for MCP servers by name, description, or features\nConfigured MCP servers\nShutdown all MCP server microVMs gracefully\nActive stdio processes\nTest connectivity to an MCP server\nEnable or disable an MCP server\nAuthentication token or key\nServer type (stdio, http, websocket)\n<code>ToString::to_string</code>, but without panic on OOM.\nUnikernel runtime for spawning isolated tool executions\nBase URL for HTTP/WebSocket MCP server or path for stdio\nWhether to use ephemeral VMs by default for tool execution\nUsername for basic auth\nValidate MCP server URL for security\nValidate stdio command to prevent command injection\nDefault connection pool size\nMaximum response size (10 MB)\nConfiguration for launching an MCP server in a microVM\nHandle to a running MCP server microVM\nMicroVM launcher service\nA mount point from host to microVM\nConfiguration for launching OSVM in a microVM\nHandle to a running OSVM microVM instance\nvsock port for MCP server communication\nTimeout for vsock operations\nConnection pool for vsock streams\nAllocate a unique vsock CID for an MCP server\nSocket path for Firecracker API\nSocket path for Firecracker API\nBuild Firecracker configuration for MCP server microVM\nProcess handle for Firecracker\nProcess handle for Firecracker\nvsock CID to connect to\nClear all connections from pool\nConfiguration used\nConfiguration used\nConnection pool for vsock communication (Option 2: …\nPool of available connections\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a connection from the pool or create a new one\nGet default configuration for OSVM runtime microVM\nCheck health of the MCP server (basic check)\nActive health check via vsock communication\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a connection is still valid\nCheck if the microVM is still running\nCheck if the MCP server microVM is still running\nCheck if we’re currently running inside a microVM\nLaunch an MCP server in a dedicated microVM\nLaunch OSVM runtime in a microVM\nMaximum pool size\nMemory allocation in MB\nMemory allocation in MB\nHost directories to mount (for config, data, etc.)\nHost directories to mount\nCreate a new connection pool\nCreate a new microVM launcher\nPath to OSVM binary to run inside microVM\nvsock port to connect to\nReturn a connection to the pool\nDirectory for socket files and VM state\nSend JSON-RPC request to MCP server via vsock (without …\nSend JSON-RPC request to MCP server via vsock (with …\nCommand to run MCP server (e.g., “node /path/to/server.js…\nGet the server ID\nServer identifier\nTerminate the microVM gracefully\nTerminate the MCP server microVM gracefully\nGet current pool size\nNumber of vCPUs\nNumber of vCPUs\nGet the vsock CID for this MCP server\nvirtio-vsock CID for communication\nvirtio-vsock CID for communication\nSocket path for virtio-vsock communication\nWait for MCP server microVM to become ready\nWorking directory for OSVM inside microVM\nWorking directory\nOVSM execution result with metadata\nExecution state tracker\nTrait for MCP tool execution\nOVSM executor that integrates with AI service\nParsed OVSM plan structure\nA section within an OVSM plan\nCalculate confidence based on execution state\nDebug mode for verbose logging\nEvaluate arithmetic expressions\nEvaluate a boolean condition\nEvaluate a simple expression\nExecute a list of branch actions, handling nested DECISION …\nExecute a CALL statement (OVSM-style: CALL tool_name)\nExecute a decision point with branching\nExecute the main branch of an OVSM plan\nExecute an OVSM plan from the AI service\nExecute a tool call (MCP tool or OVSM built-in)\nExtract a value from expression or variable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMCP tool registry for external tool calls\nCreate a new OVSM executor\nParse OVSM plan structure into sections\nRegister an MCP tool for execution\nExecution state tracking\nOVSM Service for executing scripts and managing the OVSM …\nCheck the syntax of an OVSM script file\nCheck the syntax of OVSM code without executing it\nDebug mode flag\nThe OVSM evaluator instance\nExecute OVSM code from a string\nExecute an OVSM script file\nFormat a value for display\nFormat a value as JSON\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new OVSM service instance\nConvert OVSM Value to serde_json::Value\nVerbose mode flag\nEnable debug mode\nCreate a new OVSM service with a custom tool registry\nCreate a new OVSM service with verbose output\nAdvanced FAR-style TUI chat mode (with –advanced)\nBasic terminal chat mode (without –advanced)\nBug detection result\nBug severity level\nChat mode for QA testing\nQA Agent Service configuration\nMain QA Agent Service\nTest scenario category\nQA test result\nTest scenario definition\nIndividual test step\nUse AI to analyze bug and suggest fixes\nCreate example scenario files using AI to generate …\nCreate a GitHub issue for a bug\nCreate GitHub issues for all bugs found\nCreate static example scenarios as fallback\nDetect bugs in advanced chat messages\nDetect bugs in basic chat messages\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate summary report for test results\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all available test scenarios\nLoad default test scenarios\nCreate a new QA Agent Service with simple parameters\nRun interactive QA session\nRun a single test scenario\nRun all test scenarios in a category\nShow recent QA reports\nWait for advanced agent to respond to user message\nCreate a new QA Agent Service with full config\nExtract account keys from binary data\nExtract log messages from binary data\nParse inner instructions count from meta\nParse EncodedTransactionWithStatusMeta to extract logs, …\nMain snapshot reader with parallel processing support\nSnapshot service for advanced operations\nInteractive TUI for snapshot exploration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecoded transaction instruction\nInstruction data variants for all 68+ programs\nTransaction decoder trait\nInstruction decoder registry\nSPL Token Instruction Decoder\nFormat decoded instruction for display\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeyboard event to send to TUI\nScreen capture of terminal output\nExpected screen state\nTerminal dimensions\nAction to perform in TUI\nMain TUI visual testing agent\nResult of a TUI test scenario\nVisual TUI test scenario\nIndividual test step for TUI testing\nAnalyze the current screen layout\nConvert ANSI color code to RGB\nCapture current screen state from VT100 terminal emulator\nCapture actual terminal window screenshot using system …\nCompare current screen with baseline for visual regression …\nCreate default TUI test scenarios\nExtract screen content cell-by-cell from VT100 screen\nFind an available X display number\nFind the window ID of the OSVM Chat Test window\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet debug info about current terminal state\nGet the most recent N lines from screen\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLaunch the OSVM advanced chat (convenience wrapper)\nLaunch the OSVM basic chat\nLaunch the OSVM chat in a terminal (supports both headless …\nCreate a new TUI test agent with specified terminal size\nParse a key event string like “Tab”, “F10”, “…\nRender a line with ANSI color codes\nRender terminal text to PNG image with ANSI color support\nRun a complete TUI test scenario\nSave layout analysis to JSON file\nSave screenshot to file\nSave screenshot as PNG image - captures actual rendered …\nSend a specific key event to the TUI\nSend keyboard events to the TUI\nStart Xvfb (X Virtual Frame Buffer) for headless visual …\nStop the TUI process\nStop Xvfb if running\nStrip ANSI escape codes from text\nConvert key event to ANSI escape sequence\nValidate that expected UI components are present\nVerify that specific text appears on screen\nCheck if a command exists on the system\nConvert xterm 256 color to RGB\nFirecracker (Phase 3 microVMs) - NOT USED for …\nTool execution request sent to unikernel\nTool execution response from unikernel\nConfiguration for spawning a unikernel\nHandle to a running unikernel instance\nUnikernel launcher type\nUnikernel runtime manager\nUnikraft with kraft CLI (Phase 2 ephemeral unikernels)\nAllocate an ephemeral vsock CID in the 200-299 range\nBuild kraft command for launching unikernel\nConfiguration used to spawn this unikernel\nConnect to unikernel via vsock\nSend a tool execution request to the unikernel via vsock\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPath to the unikernel image file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPath to kraft binary (default: “kraft” or with flatpak …\nkraft.yaml configuration path (for Unikraft)\nWhich launcher to use\nMemory allocation in MB\nFilesystem mounts\nCreate a new unikernel runtime\nProcess ID of the unikernel\nSend a tool execution request via vsock and receive …\nServer ID for logging\nSpawn a unikernel for tool execution\nTerminate the unikernel\nTool name being executed\nBase directory for unikernel images\nNumber of vCPUs\nVsock CID for communication\nvsock CID to allocate (200-299 range for ephemeral)\nVsock port for communication (default: 5252)\nType of UI component\nDetected border (box drawing characters)\nA detected UI component\nLayout component detection results\nLayout metrics for validation\nPosition in terminal (row, col)\nVisual regression comparison result\nSize dimensions\nText region with content\nA visual difference between two screenshots\nVisual layout validator\nAnalyze terminal screen layout\nCalculate similarity between two lines\nCalculate layout metrics\nCalculate similarity between two screenshots (0.0 - 1.0)\nCompare two screenshots for visual regression\nDetect borders (box drawing characters)\nDetect UI components in screen content\nDetect text regions\nFind specific differences between screenshots\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new visual layout validator\nAgent chat interface using cursive-multiplex with MCP tools\nMicroVM-enabled agent chat with ephemeral tool execution …\nAdvanced Agent Chat UI with FAR-style design using …\nCLI-based agent execution without UI CLI-based agent …\nAST-based code analysis for enhanced fix suggestions …\nSecurity audit system for comprehensive vulnerability …\nModular audit system with structured vulnerability checks …\nStructured Rust code parser for security analysis …\nTemplate-based report generation system Template-based …\nBlueprint theme system for consistent UI styling Blueprint …\nGranular circuit breaker system for AI services Granular …\nCode snippet extraction for DeepLogic AI Analysis Enhanced …\nColor formatting utilities for terminal output Color …\nCryptographic security utilities for key validation and …\nDashboard utilities for interactive SVM monitoring …\nDebug logging utilities with configurable verbosity levels …\nSimple devnet proxy for development Devnet RPC proxy\nDevnet RPC node that syncs with real blockchain Devnet RPC …\nSystem diagnostics and health monitoring System …\neBPF deployment utilities for program deployment\nError boundary utilities for secure error handling and …\nExample command utilities for displaying usage examples …\nEnhanced Git repository management with dynamic branch …\nInput sanitization and validation utilities for security …\nIsolation runtime support for unikernels and microVMs …\nCustom keybinding system for agent interfaces Custom …\nLoads a YAML configuration file and deserializes it into …\nLocal RPC node deployment and management Local RPC node …\nContinuous log monitoring and automatic repair Continuous …\nMainnet RPC connectivity Mainnet RPC node deployment and …\nMarkdown rendering for terminal output\nNetwork security utilities for safe network operations …\nNode management utilities for monitoring and controlling …\nNode dashboard utilities for interactive node monitoring …\nReal-time security monitoring and threat detection Secure …\nOSVM internal logging system for tracking events and …\nPath security validation and utilities Centralized path …\nPlugin system for extending functionality Advanced plugin …\nConfigurable AI prompt templates system Configurable AI …\nRPC bridge for OVSM scripts to call Solana RPC RPC Bridge …\nScreenshot capture utilities for terminal windows …\nSecure logging utilities to prevent information disclosure …\nSecure system operations without privilege escalation …\nSelf-repair system for automatic dependency management …\nSimple devnet proxy implementation Simple Devnet RPC proxy …\nSolana RPC connectivity and monitoring Solana RPC …\nSSH deployment utilities for remote node deployment SSH …\nStreaming agent with real-time terminal output (for …\nSVM information and management utilities SVM information …\nModern theme system with gradients and effects Modern …\nAdvanced theme customization system Advanced theme …\nMain application state\nAgent state for programmatic chat\nChat message types for programmatic interface\nInput state management\nProgrammatic chat state for testing\nMain task state for the chat application\nCurrent agent state\nAI service integration for chat functionality\nAI service\nDynamic embedded terminal chat interface with real-time …\nChat message history\nModern color system with RGB support and gradients …\nCommand processing logic for handling user input\nDisable raw mode for terminal input\nEnable raw mode for terminal input\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuzzy matching engine for intelligent suggestion filtering\nGenerate instant suggestions as user types (like Claude …\nHandle regular character input\nInput handling and state management for the chat interface\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMCP service\nMessage queue for processing\nProgrammatic interface for basic chat testing\nResponse queue for retrieving responses\nSimple sequential layout system for agent_chat with clean …\nDynamic terminal interface with enhanced status bar and …\nDynamic terminal interface with test mode support\nReal-time suggestion system for the chat interface\nTop-anchored system status bar with scrolling text carousel\nTask state management for tracking chat operations and UI …\nTask state for tracking operations\nTerminal utility functions for display and input management\nModern UI components with enhanced visual styling Provides …\nExecute AI plan with colored output\nExtract OVSM code blocks from AI response Returns a vector …\nGenerate real-time suggestions using AI\nGet user choice (1 for yes, 0 for no)\nProcess message with AI and update chat history\nRun demo mode for testing\nShow animated status message\nDisplay colored plan diagram\nShow context visualization\nShow contextual suggestions based on chat history\nShow help commands\nShow status overview\nWrap text to specified width\nMain application state\nArrow key enum\nInput character classification\nAdjust suggestion window to keep selected item visible\nClear dropdown suggestions display - simplified\nClose input border\nExecute AI plan with colors\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate real-time suggestions using AI (background task)\nGet available tools for AI planning\nEnhanced input handling with status bar integration and …\nLegacy compatibility functions\nGenerate instant suggestions as user types (like Claude …\nGet user choice with colors\nHandle down arrow navigation - move selector only, don’t …\nHandle arrow key navigation\nHandle up arrow navigation - move selector only, don’t …\nHandle Backspace key press\nHandle Enter key press\nHandle regular character input\nHandle Tab completion - adopt suggestion and advance …\nHighlight matched characters in fuzzy search results\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNavigate command history down\nNavigate command history up\nCreate new app instance\nPrint token usage grid visualization (like Claude Code)\nProcess message with AI planning\nRead line-buffered input for test mode (programmatic …\nRead and classify a single character from input\nRedraw input box at bottom after processing\nRedraw input line cleanly with error handling - keep it …\nRender markdown content using termimad for terminal display\nDynamic terminal interface with enhanced status bar and …\nDynamic terminal interface with test mode support\nShow animated status with dynamic characters\nShow available tools\nShow colored ASCII plan diagram with proper text wrapping\nShow context visualization with real system information\nShow contextual suggestions after AI response\nShow compact contextual suggestions - sequential rendering\nShow help commands\nShow navigable suggestions with windowed scrolling and …\nShow status overview\nShow detailed task information below input bar\nUpdate suggestions for current input with suppression logic\nWrap text to specified width\nModern color system with rich RGB colors\nGradient types for text effects\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate glowing text effect\nApply gradient to text\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMix two RGB colors\nCreate pulsing text (for animations)\nCreate color with transparency simulation (using dimming)\nCommand context for advanced processing\nHandler function type for commands - simplified to avoid …\nCommand processor for handling various input types\nResult of command execution\nAdd message to history\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet active servers\nGet recent history\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if input is a command\nCreate new command processor with default handlers\nParse tool invocation with safe array access\nProcess input and determine action\nProcess MCP tool invocation\nRegister custom command handler\nUpdate MCP servers list\nFuzzy matching engine using modified Levenshtein distance\nFilter and score a list of candidates\nReturns the argument unchanged.\nGet character indices that match the pattern\nCalls <code>U::from(self)</code>.\nCreate a new fuzzy matcher with given threshold\nCalculate fuzzy match score between pattern and text\nArrow key directions\nInput character classification\nConfiguration for input handling behavior\nInput handler for processing keyboard input\nInput state management\nAdd command to history with size limit\nApply selected suggestion\nClear current input\nDefault command history for demonstration\nDelete character before cursor (handles UTF-8 properly)\nDisable raw mode for terminal input\nEnable raw mode for terminal input\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate smart auto-suggestions based on current input and …\nNavigate history down\nNavigate history up\nInsert character at cursor position (handles UTF-8 …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMove to end of line\nMove to start of line\nMove cursor left\nMove cursor right\nCreate new input state with default configuration\nLegacy process input method for backward compatibility\nProcess input character and update state with suggestion …\nRead and classify a single character from input\nRead escape sequences (arrow keys, etc.)\nReset selection when input changes\nCheck if suggestions should be debounced\nNavigate suggestions down\nNavigate suggestions up\nUpdate suggestions without disturbing terminal state\nAgent state for programmatic chat\nChat message types for programmatic interface\nProgrammatic chat state for testing\nAdd an agent response to history\nAdd an error message to history\nAdd a system message to history\nCurrent agent state\nAI service\nChat message history\nClear chat history\nGet the message content as a string\nGenerate help response\nGenerate status response\nGenerate tools response\nGet the current agent state\nGet available tools for AI planning\nGet recent messages (for testing)\nInitialize the chat state\nCheck if this is an error message\nMCP service\nMessage queue for processing\nCreate a new programmatic chat state\nProcess message internally (without terminal I/O)\nResponse queue for retrieving responses\nSend a message programmatically\nSet the agent state\nTask state for tracking operations\nWait for agent to finish processing\nIndividual component area with position and size\nScreen areas for different components with absolute …\nSimple sequential terminal renderer that preserves text …\nGet areas (simplified)\nCalculate responsive component areas based on terminal size\nFormat text with color preservation for terminal …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle resize - not needed for sequential rendering\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if area is valid for current terminal size\nMinimal layout for very small terminals\nCreate new renderer - no complex positioning needed\nSimple sequential rendering - just use println!\nSimple rendering that respects terminal scroll buffer\nTruncate text with ellipsis for narrow displays\nUpdate layout for new terminal size\nText formatting utilities for responsive display\nReal-time suggestion with fuzzy matching metadata\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new suggestion\nCreate with score and matched indices\nActive unikernel execution\nMCP tool deployment information\nMount information\nMounts configuration structure\nSystem status information\nCreate system status bar manager\nScrolling text carousel state\nCount running isolation processes\nCount processes by name\nDetect configured MCP servers from config file\nDetect current Solana network\nFormat active unikernels for status bar\nFormat MCP deployment info for status bar\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet active unikernels for a specific MCP server\nGet component status (placeholder for real orchestrator …\nGet MCP server configuration file path\nGet MCP tool deployments with mount information\nGet mounts configuration file path\nGet OSVM access folders\nGet real system status information\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad mounts configuration\nRender the top-anchored status bar\nUpdate carousel position and return current visible text\nUpdate and render the status bar\nInput modes for the UI\nSpinner animation frames\nMain task state for the chat application\nIndividual todo item with execution tracking\nPriority levels for todo items\nMark as completed with results\nDefault initialization todos\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet currently selected task details\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNavigate to next todo item\nNavigate to previous todo item\nCreate new task state with default initialization tasks\nCreate empty task state without any mockup data\nCreate a new high-priority todo item\nSwitch between input modes\nToggle todo item completion - safe bounds checking\nUpdate spinner animation frame\nClear current line\nClear inline suggestion (ghost text)\nClear screen and reset cursor\nClear suggestions display area - now handled by responsive …\nClose input border\nMove cursor to position\nPrint input prompt\nRedraw input line with current text\nRestore cursor position\nSave cursor position\nShow available tools from MCP servers\nShow input border for visual separation\nLegacy function - suggestions now handled by …\nLegacy function - real-time suggestions now handled by new …\nLegacy function - real-time suggestions now handled by new …\nRender input bar in TUI\nRender task status in TUI\nShow enhanced status bar with modern styling and icons\nShow enhanced status bar using simple sequential output\nShow task details with modern styling and progress …\nShow task details using simple sequential rendering with …\nShow modern welcome box with gradient and rounded corners\nWrap text to specified width\nConfiguration for microVM-enabled chat\nCPU count for chat VM\nMemory allocation for chat VM (MB)\nEnable debug logging\nUse ephemeral VMs for all tool executions\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPrint help message\nIntegration point for the existing chat UI to use microVMs\nRun the actual chat interface inside the microVM\nRun the microVM-enabled agent chat interface\nRun microVM chat with custom configuration\nAgent execution system for background processing\nHandle window resize events safely\nSession persistence for chat2 Save and load chat sessions …\nMain entry point for the advanced agent chat UI\nDemo mode for advanced chat interface\nSynchronous UI runner to avoid async runtime conflicts\nChat session management and recording functionality\nSet up periodic UI updates every 30 seconds as requested\nMain application state for advanced chat UI\nCore data structures and types for the advanced agent chat …\nUser interface components and management\nUtility functions for text processing and UI formatting\nAgent execution commands and types\nAgent execution logic for AI processing and tool execution\nAgent worker for background processing\nAgent execution commands\nTheme-related commands\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPhase 2: Wrapper that implements McpToolExecutor for OVSM …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPersisted state container\nCreate default sessions (only if no saved state exists)\nReturns the argument unchanged.\nGet the path to the persistence file\nCalls <code>U::from(self)</code>.\nLoad state from disk\nSave state to disk\nChat session with full state tracking\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMain application state for advanced chat UI\nTheme configuration structure\nAdd a message to input history (like bash history)\nCached status bar text to reduce blocking UI thread\nDirect MCP tool execution without unikernel isolation\nHelper to ensure cleanup always happens\nCreate a new chat session\nDelete a chat session by ID\nPhase 2: Execute OVSM plan using the execution engine with …\nExecute tool in ephemeral unikernel for maximum isolation\nPhase 1 fallback: Execute tools iteratively without OVSM …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet theme configuration file path\nGet current history position for display\nNavigate to next entry in history (down arrow)\nCurrent position in input history (None = at prompt, …\nNavigate to previous entry in history (up arrow)\nInput history buffer (like bash history)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if currently navigating history\nLast time the status was updated\nLoad theme from configuration file or environment\nMCP tools panel visibility (progressive disclosure - …\nPhase 2: OVSM execution engine for plan-based tool …\nSave state to disk asynchronously (non-blocking)\nSave current theme to configuration file\nSynchronous version for sending commands from UI callbacks\nStart spinner animation for processing states\nAgent execution state\nMessage types in the advanced chat interface\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a human-readable timestamp for this message Returns a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the message type as a string for display\nAccessibility features for improved usability\nSmooth animations and transitions for a delightful TUI …\nSmart autocomplete system for input field\nIndividual UI components\nSmart cursor management for optimal focus flow\nDisplay update logic and UI refresh\nVisual effects for focus, attention, and user feedback\nEnhanced error handling with user-friendly messages and …\nEvent handlers for the advanced chat UI\nInput validation and sanitization\nKey event diagnostic logger for debugging keyboard input …\nMain UI layout and setup\nAdvanced layout system with golden ratio, adaptive sizing, …\nLoading indicators and progress displays for long-running …\nEnhanced message rendering with semantic colors and effects\nFirst-time user onboarding and tips\nSearch and filtering functionality for UI components\nCustom TextArea wrapper that intercepts Ctrl+Enter before …\nModern theme system for agent_chat_v2 UI Provides enhanced …\nModular theme system with multiple built-in themes Each …\nNon-blocking toast notification system\nMain UX orchestrator - coordinates all visual effects, …\nVisual feedback system for state changes and user actions\nAccessibility configuration\nQuick accessibility tips\nAnnouncement priority levels (ARIA live regions)\nAccessibility announcements (for screen readers)\nColor contrast helpers for accessibility\nKeyboard navigation hints\nText sizing helpers\nAnnounce action completed\nGet animation duration based on motion preferences\nGet configuration file path\nCalculate contrast ratio between two colors\nCreate an announcement string\nDetect if high contrast is preferred (from environment)\nDetect if reduced motion is preferred\nDetect if screen reader is likely in use\nAnnounce error\nFocus indicators (for keyboard navigation)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet keyboard navigation help text\nHigh contrast mode for better visibility\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLarger text mode (increases spacing)\nGet line spacing multiplier based on config\nLoad configuration from file\nCheck if contrast meets WCAG AA standard (4.5:1 for normal …\nCheck if contrast meets WCAG AAA standard (7:1 for normal …\nGet padding multiplier based on config\nReduce animations for motion sensitivity\nCalculate relative luminance (WCAG formula)\nSave configuration to file\nScreen reader friendly mode\nCheck if element should show focus indicator\nShould show verbose descriptions\nSound notifications enabled\nConvert sRGB to linear RGB\nAnnounce state change\nToggle high contrast mode\nToggle reduce motion\nToggle screen reader mode\nVerbose mode (more detailed messages)\nWrap text at appropriate width\nTrait for all animations\nAnimation manager to coordinate all animations\nAnimation state that can be shared across threads\nFrame rate controller for smooth animations\nParticle system for special effects\nSpring physics for bouncy animations\nSmooth color transitions for visual feedback\nGet current actual FPS\nEasing functions for smooth animations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInterpolate between two values\nInterpolate colors smoothly\nSmooth progress indicators that feel responsive\nAdaptive quality - reduce quality if FPS drops\nCheck if enough time has passed for next frame\nVarious spinner animations for loading states - keeps …\nTypewriter effect for AI responses - creates anticipation …\nBreathing/pulsing color effect\nSmooth color fade between two colors\nFlash effect for notifications\nMulti-color gradient animation\nRainbow color cycle for special effects\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCubic ease in-out (smoother than quadratic)\nQuadratic ease in-out (accelerate then decelerate)\nQuadratic ease in (accelerating)\nBack ease out (overshoot then settle)\nBounce ease out\nElastic ease out (bouncy)\nQuadratic ease out (decelerating)\nLinear interpolation (no easing)\nCircular progress indicator\nSmooth progress bar with partial fill characters\nStep progress for multi-step operations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDNA helix spinner for biotech/scientific feel\nMulti-spinner for showing parallel operations\nOrbital spinner - electrons orbiting nucleus\nPulsating text for emphasis\nBasic spinner animation\nCollection of spinner animations\nGet frames for the spinner\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet interval between frames in milliseconds\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMatrix rain effect for dramatic moments\nTypewriter animation for text appearing character by …\nWave text effect where characters appear in a wave pattern\nAdd next character(s) to displayed text\nEmit typing sound (terminal bell or custom)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet delay for next character based on context\nGet current display text with optional cursor\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet progress percentage\nSet typing speed (1.0 = normal, 2.0 = double speed, 0.5 = …\nEnable variable speed based on punctuation\nSkip to end (instant complete)\nAutocomplete context and suggestions\nApply the selected suggestion\nAvailable commands\nCreate autocomplete suggestion view\nCurrent input text\nCursor position\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the word at the current cursor position\nHandle Tab key for autocomplete\nInitialize autocomplete for the input field\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAvailable MCP tools for @ mentions\nProcess input and generate suggestions\nShow inline autocomplete suggestions\nActive suggestions\nCommon phrases and templates\nUpdate with available MCP tools\nContext for determining cursor position\nVisual cursor indicator with animation\nCursor parking positions for idle states\nSmart cursor manager that predicts optimal focus position\nTab order manager for keyboard navigation\nMove cursor to optimal position\nGo back to previous focus\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet focus breadcrumb trail\nDetermine optimal cursor position based on context\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnable/disable predictive mode\nSet up intelligent cursor rules\nIntegration helper for cursor management\nAttention director - guides user focus\nEffect intensity levels\nGlow/highlight effect for important elements\nMaximum particles allowed to prevent memory bloat\nRipple effect for touch/click feedback\nShake effect for errors or attention\nSparkle effect for success/achievement\nBase trait for all visual effects\nFocus management and visual indicators for active elements\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMicro-interactions that make the UI feel alive and …\nToast notifications and alert system\nFocus indicator with animated borders\nTab order manager for keyboard navigation\nVisual focus trail for smooth transitions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nButton press effect with visual feedback\nDrag feedback for draggable elements\nHover effect for interactive elements\nScroll momentum for smooth scrolling\nSelection feedback with visual highlighting\nTyping feedback for input fields\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAchievement popup with celebration effect\nAlert dialog for important messages\nStack of toast notifications\nNotification type determines appearance and behavior\nToast notification that appears and fades\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAgent is stuck in processing state\nAI service unavailable\nCommon error types with recovery suggestions\nFile operation failed\nMCP server connection failed\nMessage send failed\nSession not found\nTerminal too small\nUnknown error with context\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet user-friendly error message with emoji icon\nGet recovery suggestions for this error\nShow error dialog with recovery suggestions\nQuick error helpers for common scenarios\nEnhance message with AI before sending\nExecute a test tool call and show results with metrics\nExecute a theme command and return the response\nExport cursive screen buffer for TUI rendering\nFilter history based on fuzzy query\nFilter sessions based on fuzzy query\nSimple fuzzy match: check if all chars in needle appear in …\nHandle theme-related commands\nInsert a specific history item into the input field\nInsert selected history item into input\nJump to the first filtered session when Enter is pressed\nSend message from button click\nF3 - Advanced shortcuts and features (progressive learning …\nF2 - Common shortcuts for regular users (progressive …\nShow drafts dialog\nEdit menu handler - dropdown style with visual mnemonics\nF1 - Essential shortcuts for new users (progressive …\nFile menu handler - dropdown style with visual mnemonics\nHelp menu handler - dropdown style with visual mnemonics\nShow input history search dialog (bash-style Ctrl+R)\nShow quick keyboard shortcuts hint panel (called on …\nSession menu handler - dropdown style with visual mnemonics\nShow session search dialog with fuzzy matching\nShow test tool dialog with input fields\nShow theme switcher dialog\nShow detailed information about an MCP tool\nTools menu handler - dropdown style with visual mnemonics\nSwitch to a specific session\nToggle MCP server collapsed/expanded state\nUpdate character counter display based on current input …\nInput validation result\nCheck if input contains potentially sensitive data\nReturns the argument unchanged.\nWarning message for potentially sensitive input\nCalls <code>U::from(self)</code>.\nCheck if input looks like a command\nParse command from input\nSanitize input for safe display and processing\nTruncate message for display with ellipsis\nValidate user input before processing\nFormat a cursive Event as a readable diagnostic string\nInstall a global key event logger for diagnostics\nCreate a diagnostic overlay showing recent key presses\nFAR-style/Borland UI implementation\nApply current theme to cursive interface\nConvert our color format to cursive Color\nCreate collapsible MCP tools view\nCreate simplified chat area (no duplicate buttons)\nCreate top menu bar (Microsoft Edit style)\nCreate unified sidebar with sessions and collapsible MCP …\nFallback message formatting without themes\nFormat message with color styling\nApply theme styling to a message based on its type\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse hex color string to RGB tuple BUG-2019 fix: Validate …\nUpdate input panel title to show history indicator\nUpdate MCP tools visibility (Progressive Disclosure - …\nLayout configuration based on terminal size\nMain layout manager that handles responsive design\nAdaptive layout that responds to terminal size changes\nAnimate transition between layouts\nCheck if animations are enabled\nCalculate optimal layout based on terminal size\nGet current layout configuration\nGet nth Fibonacci number\nCalculate height using Fibonacci sequence\nCalculate width using Fibonacci sequence\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGolden ratio layout implementation for harmonious …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate layout when terminal is resized\nHelper functions for creating responsive views\nToggle animations\nAdaptive container that changes based on available space\nBreakpoints for responsive design\nCollapsible sidebar that can be toggled\nFluid container that scales content proportionally\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGolden ratio constant (phi)\nCalculate golden ratio proportions for a given dimension\nCreate a golden ratio based layout\nCreate a Fibonacci spiral layout for artistic presentation\nReturns the argument unchanged.\nCalculate golden rectangle dimensions\nCalls <code>U::from(self)</code>.\nCreate a golden spiral layout\nSplit a dimension into golden ratio proportions Returns …\nCalculate multiple golden ratio segments\nCreate responsive input area that adapts to height\nCreate adaptive padding based on available space\nCreate a responsive sidebar that adapts to width\nOperation progress tracker for complex multi-step …\nClear inline loading indicator\nClose loading dialog\nClose loading overlay\nClose progress dialog\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nShow a minimal inline loading indicator (non-blocking)\nShow an indeterminate loading dialog for unknown-length …\nShow loading overlay with semi-transparent effect …\nShow a progress dialog with percentage indicator\nShow a toast-like notification (auto-dismissing after …\nStart animated spinner in a loading dialog with elapsed …\nUpdate loading dialog message\nUpdate progress dialog\nCode block renderer with syntax highlighting hints\nMessage animation coordinator\nEnhanced message renderer with effects\nMessage type for semantic coloring\nGet ASCII icon for terminals without emoji support\nGet the border style for message containers\nGet the semantic color for this message type\nFormat timestamp for display\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the icon for this message type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender message in a box with borders\nCreate gradient effect for important messages\nRender a message with all effects\nWrap text to fit width\nContext for showing appropriate tips\nReturns the argument unchanged.\nGet path to welcome flag file\nCheck if user has seen the welcome dialog before\nCalls <code>U::from(self)</code>.\nMark welcome dialog as seen\nShow all tips in a scrollable dialog\nShow contextual tip based on user action\nShow tips of the day\nShow a quick tips hint after welcome\nShow welcome/onboarding dialog\nShow welcome dialog for first-time users\nMCP Tool search state\nAdd tool to favorites\nAdd tool to recent\nAll available tools (server_id -&gt; tools)\nCreate the search results view\nFavorite tools (tool_name -&gt; server_id)\nCurrently filtered tools\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRebuild search results view after filter update\nRecently used tools\nSearch query\nShow MCP tool search dialog\nShow session search dialog\nUpdate the search filter\nUpdate session search results\nWraps TextArea to intercept Ctrl+Enter and pass it to …\nDowncast self to a <code>Any</code>.\nDowncast self to a mutable <code>Any</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecorative borders and separators\nUI status icons (text-based, no emojis)\nModern color palette for the advanced chat UI\nProgress bar builder\nAnimation frames for spinners\nStyled text builders for consistent formatting (VS Code …\nCreate accent text (VS Code bright blue)\nGet list of available theme names\nGet theme by name\nVS Code inspired dark theme with professional colors\nCreate error text (VS Code red)\nCreate a fancy header with decorations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate gradient-like text (VS Code style)\nCreate a high-contrast theme for accessibility\nCreate highlighted text (VS Code selection)\nCreate info text (VS Code blue)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a modern light theme\nCreate a styled progress bar string\nCreate a segmented progress bar\nCreate a section divider\nCreate success text (VS Code green)\nCreate warning text (VS Code orange)\nMessage-specific colors for semantic highlighting\nTheme metadata for selection and preview\nCentral theme manager with hot-swapping support\nGet current theme\nCyberpunk Neon theme - high contrast with electric vibes\nDracula Enhanced theme - dark with vibrant colors\nEnable automatic theme switching based on time\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGruvbox Material theme - retro groove with modern …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet all available themes\nNord Ice theme - cool, professional, easy on the eyes\nSolarized Pro theme - precision engineered colors\nSwitch to a different theme with smooth transition\nGet theme for current time of day\nTokyo Night Storm theme - modern Japanese-inspired …\nVS Code Dark theme - familiar and professional\nToast notification\nToast notification manager\nType of toast notification\nAdd a new toast notification\nRemove expired toasts\nGet the color style for this toast type\nCreate a view showing all active toasts\nCreate the view for this toast\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet active toasts\nGet the icon for this toast type\nInitialize the toast system for a Cursive instance\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the toast has expired\nCreate a new toast manager\nCreate a new toast notification\nShow an error toast\nShow an info toast\nShow a success toast\nShow a toast notification\nShow a warning toast\nPerformance statistics\nCentral UX coordinator that manages all visual enhancements\nApply responsive layout based on terminal size\nApply time-based theme\nCheck for terminal resize\nCreate smooth progress bar\nFocus next element\nFocus previous element\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current performance stats\nInitialize with user preferences\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShow an error notification\nShow a success notification\nHandle terminal resize\nTrigger button press effect\nRegister UI elements for focus management\nRender message with semantic colors\nHelper to integrate orchestrator with Cursive\nShow loading spinner\nStart ambient background animations\nStart typewriter effect for a message\nSwitch theme\nToggle animations\nToggle effects\nMain update loop - call this every frame\nUpdate all animations\nUpdate all visual effects\nUpdate notification stack\nAccessibility helpers\nAnimated indicators\nBox drawing characters\nCreate visual dividers and separators\nVisual feedback levels\nMessage states\nSpinner frames for different states\nServer status states\nSpinner animation styles\nTool status states\nVisual state indicators for different components\nAgent state with full visual treatment\nGet background color for feedback level\nCreate a simple box around text\nGet color for feedback level\nConnection state indicator\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate high-contrast styled text\nHistory navigation indicator\nHorizontal divider\nThick horizontal divider\nGet emoji icon for feedback level\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if high contrast mode is needed (from environment)\nMCP server status\nMessage state indicator\nOperation progress indicator\nRecording indicator (animated)\nAdd semantic prefix for screen readers\nSection divider with label\nGet spinner frame\nCreate animated spinner with message\nCreate styled text with background\nCreate styled text with feedback level\nTool execution status\nValidation state indicator\nText sanitization and formatting utilities\nMarkdown rendering utilities for text display\nAI-powered suggestion generation and handling\nEnhanced JSON sanitization (alias for backward …\nSanitize JSON for safe display in TUI\nEnhanced text sanitization with emoji removal (alias for …\nSanitize text for safe display in TUI\nRender markdown text for display in TUI\nResult of agent command execution\nIndividual tool execution result\nExecute an agent command from the CLI\nExecute a tool from the OSVM plan\nExecute the agent plan\nFormat tool result for display\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAnalysis context for tracking code patterns and …\nAST-based code analyzer for sophisticated vulnerability …\nCode location information for precise targeting\nImprovement suggestions for code quality\nOwner validation analysis result\nRepresents a specific security issue found in the code\nTypes of security issues we can detect with AST analysis\nSeverity levels for security issues\nSigner validation analysis result\nVisitor for analyzing Solana/Anchor program patterns\nAdd account validation to a statement\nAdd signer validation to a statement\nAdd slippage protection to a statement\nParse and analyze a Rust source file\nAdvanced owner validation analysis using control flow\nAdvanced signer validation analysis using control flow\nAnalyze a statement for signer validation patterns\nApply pattern-based fixes with AST-aware insertion\nExtract account name from a statement string\nExtract the variable name that holds an account reference …\nExtract detailed vulnerability information using AST …\nCache of parsed files to avoid re-parsing\nFix a block of statements\nFix an expression\nFix a single statement\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate enhanced fix suggestions based on AST analysis\nInsert owner validation fix using AST-aware positioning …\nInsert signer validation fix using AST-aware positioning\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAI analysis result from OpenAI (existing structure)\nCircuit breaker for AI operations to handle persistent …\nAI-enhanced security finding\nAnalysis vectors for DeepLogic AI Scanner\nMain audit coordinator with enhanced modular architecture …\nSecurity audit finding\nComplete audit report\nAudit severity levels\nAudit summary statistics\nCode snippet with context for vulnerability analysis\nDeepLogic AI Analysis for complex logical vulnerabilities\nLocation where a finding was detected\nGrouped audit findings of the same type in the same file\nOpenAI API client for AI-powered analysis with rate …\nSystem information for audit context\nRAII wrapper for temporary directories that ensures cleanup\nAdd a finding instance to this group\nAnalyze code content for security issues with enhanced …\nPerform DeepLogic AI analysis for complex logical …\nAnalyze dependencies using parsed TOML structure\nAnalyze a security finding using OpenAI with enhanced …\nAnalyze security impact and assign CVE/CVSS scores\nPerform GitHub repository audit workflow\nAudit files in the repository directory\nCalculate audit summary\nCheck for Account Data Matching vulnerabilities (Solana …\nCheck for Account Data Reallocation vulnerabilities …\nCheck for Account Reloading vulnerabilities (Solana …\nCheck for advanced security patterns\nCheck for Arbitrary CPI vulnerabilities (Solana …\nCheck for Authority Transfer vulnerabilities (Solana …\nCheck for Bump Seed Canonicalization vulnerabilities …\nCheck for Closing Accounts vulnerabilities (Solana …\nCheck for command injection vulnerabilities\nCheck configuration files for security issues\nEnhanced configuration security checks\nCheck for cryptographic issues\nCheck dependency security in Cargo.toml\nEnhanced dependency security checks\nFallback dependency analysis using string matching\nCheck for Duplicate Mutable Accounts vulnerabilities …\nCheck for error handling issues\nCheck for Financial Math Precision vulnerabilities (Solana …\nCheck for Frontrunning vulnerabilities (Solana …\nCheck for input validation issues\nCheck for Insecure Initialization vulnerabilities (Solana …\nCheck for insecure network operations\nCheck for Overflow and Underflow vulnerabilities (Solana …\nCheck for path traversal vulnerabilities\nCheck for PDA Sharing vulnerabilities (Solana …\nCheck for positive security practices (info-level findings …\nCheck for Precision Loss vulnerabilities (Solana …\nCheck for Remaining Accounts vulnerabilities (Solana …\nCheck for Rust-Specific Errors (Solana Vulnerability #17)\nCheck for security best practices at project level\nCheck for security excellence indicators (comprehensive …\nCheck for Solana account validation issues\nCheck for Anchor framework specific security issues\nCheck for Solana development anti-patterns\nCheck for Cross Program Invocation (CPI) security …\nCheck for Solana-specific cryptographic security issues\nCheck for program deployment and upgrade security issues\nCheck for governance and DAO security issues\nCheck for Solana network and RPC security issues\nCheck for oracle and external data security issues\nCheck for advanced Program Derived Address (PDA) security …\nCheck for Solana program security vulnerabilities\nCheck for Solana runtime and performance security issues\nCheck for Solana-specific security vulnerabilities\nCheck for advanced Token Program security issues\nCheck for Solana transaction and versioning security issues\nCheck for Type Cosplay vulnerabilities (Solana …\nCheck for unsafe code blocks\nCheck for unwrap usage without proper error handling\nClone repository to temporary directory with branch …\nCollect system information\nCommit and push audit results\nCompile Typst document to PDF\nCheck if content contains potential secrets\nConvert diagnostic results to audit findings\nCreate audit branch with timestamp and commit hash\nCreate a fallback audit report when diagnostics fail\nCreate a fallback DeepLogic analysis when AI is not …\nCreate a test audit report for demonstration\nCreate Typst document content\nDisable AI analysis due to persistent errors\nEnhance existing findings with AI analysis with improved …\nEnhance grouped findings with AI analysis (more efficient …\nExecute git command with timeout to prevent hanging …\nExtract DeepLogic findings from grouped findings\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new grouped finding from a single finding\nGenerate audit files in the repository\nGenerate compliance notes\nGenerate HTML report using template system\nGenerate HTML report with optional external template\nGenerate JSON report using template system\nGenerate JSON report with optional external template\nGenerate Markdown summary using template system\nGenerate Markdown summary with optional external template\nGenerate security recommendations\nGenerate Typst document from audit report using template …\nGenerate Typst document with optional external template\nGet current AI circuit breaker status\nGet dependency information\nGet OS information\nGet Rust version\nGet security references for categories\nGet Solana version\nGet all crate directories in a workspace using …\nFallback workspace member detection using manual TOML …\nGroup findings by type and file for better reporting\nGet a unique key for grouping findings\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetect if the current directory is a Rust workspace using …\nFallback workspace detection using file parsing\nCheck if a finding belongs to this group\nCreate a new OpenAI client with retry and rate limiting\nCreate a new audit coordinator\nParse AI finding JSON into AuditFinding\nParse repository specification (owner/repo#branch or …\nPerform additional security-specific checks\nPerform AI-powered code analysis with enhanced error …\nPerform DeepLogic AI analysis for a finding\nQuery AI service (either OpenAI client or internal AI …\nReset AI circuit breaker and re-enable if client is …\nRun cargo-audit to check for known vulnerabilities\nRun audit using only the modular system (fallback when …\nRun enhanced modular security checks\nRun comprehensive security audit with enhanced modular …\nHelper function to safely create regex patterns in the …\nRecursively scan Rust files in a directory\nDetermine if a finding qualifies for DeepLogic analysis\nCheck if AI should be used based on circuit breaker state\nSafely terminate a process using cross-platform methods\nSingle attempt to analyze code\nSingle attempt to perform DeepLogic analysis\nSingle attempt to analyze a finding\nConvert grouped findings back to individual findings for …\nCreate a new audit coordinator with AI capabilities …\nCreate a new audit coordinator with custom AI API\nCreate a new audit coordinator with internal AI …\nCreate a new audit coordinator with optional AI …\nTrait for audit check modules\nCryptographic security audit checks\nGlobal finding ID allocator to ensure unique IDs across …\nFinding ID allocator for unique ID generation\nInput validation audit checks\nMemory safety audit checks\nModular audit coordinator that uses individual check …\nNetwork security audit checks\nCached regex patterns for performance with lazy loading …\nLazy-loaded regex getter with performance optimization\nSession ID for this audit run based on timestamp\nSolana-specific security audit checks\nAdd a custom audit check\nDetermine confidence level and likelihood of Solana key …\nRun all audit checks on a file\nCategory of vulnerabilities this check covers\nRun the audit check on parsed code\nCheck for atomic validation patterns and race conditions\nCheck for proper authority transfer patterns\nRun the audit check on raw content (for backward …\nCheck for duplicate mutable account patterns\nCheck for MEV protection patterns\nCheck for precision arithmetic issues\nCheck for additional Solana security patterns using regex …\nConstants for security analysis configuration\nHelper function to create regex patterns safely at compile …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet regex pattern with lazy loading for better startup …\nGet current session ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a public key matches known Solana program IDs\nCheck if a string is a valid base58 encoded Solana public …\nGet list of available checks\nName of the audit check\nCreate a new modular audit coordinator with default checks\nGenerate a category-specific finding ID with UUID for …\nGenerate a unique finding ID with session context (using …\nGenerate a legacy timestamp-based finding ID with session …\nGenerate UUID-based finding ID for maximum uniqueness\nBase58 character set for Solana public keys\nCommon false positive indicators for key detection\nSolana public key length constraints\nLine tracking utility for correlating AST nodes with …\nStructured analysis result from parsing Rust code\nRust code parser using syn for structured analysis\nVisitor for collecting security-relevant information from …\nAnalyze if account data validation is performed\nAnalyze if account owner is properly verified\nAnalyze if program ID is properly checked before CPI calls\nAnalyze if proper signer validation is performed\nAnalyze Solana-specific security vulnerabilities\nAnalyze Solana-specific security patterns in function calls\nCheck for owner validation patterns in the surrounding …\nCheck for signer validation patterns in the surrounding …\nCheck if an expression contains owner validation patterns\nCheck if code contains specific patterns using structured …\nCheck if an expression contains program ID validation …\nConvert expression to string for analysis\nExtract PDA seeds from find_program_address or …\nGet all lines containing a pattern\nFind the line number where a specific pattern appears\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if the function call itself validates owner\nGet all line numbers where a pattern occurs\nExtract line number using pattern matching with source code\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if an expression involves dynamic/runtime values\nCheck if the expression is likely an account access\nParse Rust code and extract security-relevant information\nHelper function to convert a Path to a string\nEnhanced AI error handling with rate limiting and better …\nTemplate-based report generator\nAdd custom template\nCalculate additional statistics\nCategorize findings by category\nCreate template context from audit report\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate fallback analysis when AI fails\nGenerate HTML report\nGenerate HTML report with optional external template\nGenerate JSON report\nGenerate JSON report with optional external template\nGenerate Markdown summary\nGenerate Markdown summary with optional external template\nGenerate report using template\nGenerate report using template with optional external …\nGenerate Typst document from audit report\nGenerate Typst document with optional external template\nCreate retry strategy based on error type with exponential …\nGroup findings by severity\nHandle AI analysis error with comprehensive logging …\nHandle AI analysis error with comprehensive but …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList available templates\nCreate a new template report generator\nCreate a new AI error handler with rate limiting\nCheck if error should disable AI analysis\nCheck if we should log the error (rate limiting)\nAnimation settings\nBlueprint theme configuration\nTheme manager for generating consistent styles\nCLI color scheme for terminal output\nColor palette for the blueprint theme\nComponent-specific styling\nLayout settings\nTypography configuration\nAnimation and transition settings\nPrimary color palette\nComponent styling\nPrimary font family (monospace for CLI feel)\nSecondary font family\nFont sizes in rem\nFont weights\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate complete CSS for HTML reports\nGenerate CLI color scheme for terminal output\nGet theme configuration\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLayout specifications\nLine heights\nTypography settings\nUpdate theme colors\nEnhanced analysis vector types for granular control\nCircuit breaker configuration\nIndividual circuit breaker instance\nComprehensive status report\nCircuit breaker states with enhanced granularity\nCircuit breaker statistics\nAPI endpoint identifier\nMain circuit breaker manager with granular control\nCheck if the circuit should allow a request\nCheck if request can execute for endpoint and vector\nCheck global circuit breaker\nCheck if request can execute for analysis vector\nConfigure circuit breaker for a specific endpoint\nConfigure circuit breaker for a specific analysis vector\nDefault configuration\nCircuit breakers per endpoint\nNumber of failures before opening circuit\nTime window for counting failures\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet statistics for endpoint\nGet global statistics\nGet comprehensive status report\nGet analysis vector health score (0.0 to 1.0)\nGet statistics for analysis vector\nGlobal circuit breaker\nMaximum concurrent requests in half-open state\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if analysis vector is available\nRecord a failed request\nRecord failure for endpoint\nRecord global failure\nRecord failure for analysis vector\nRecord a successful request\nRecord success for endpoint\nRecord global success\nRecord success for analysis vector\nHow long to wait before attempting recovery\nReset all circuit breakers\nEnable/disable circuit breaker for specific analysis vector\nNumber of successful requests needed to close circuit\nUpdate circuit state based on time and conditions\nCircuit breakers per analysis vector\nCreate with custom default configuration\nEnhanced code extractor with AST analysis capabilities\nApply basic pattern-based fixes\nExtract relevant patterns from finding description\nExtract problematic code based on audit finding\nExtract code snippet around a specific line with context\nExtract code snippet based on pattern matching\nReturns the argument unchanged.\nGenerate enhanced fix suggestions using AST analysis\nGenerate a suggested fix snippet based on the problematic …\nCalls <code>U::from(self)</code>.\nFormat text in bold\nFormat text as code/monospace\nFormat text as a command example (cyan)\nFormat text with custom color\nFormat text as an error message (red)\nFormat text as a heading (cyan bold)\nFormat text as important information (bright white)\nFormat text in italic\nFormat text as a key in key-value pair (yellow)\nFormat node status with appropriate color\nFormat numeric value with appropriate color based on …\nFormat text as secondary information (bright black/gray)\nFormat separator line (bright black)\nFormat text as a subheading (blue bold)\nFormat text as a success message (green)\nFormat table header text (blue bold)\nFormat text as a URL or path (cyan underlined)\nFormat text as a value in key-value pair (bright white)\nFormat text as a warning message (yellow)\nSecure key validator\nMinimum entropy requirements for key generation\nSecure key storage utilities\nCheck against known weak keys (test keys, dev keys, etc.)\nDelete a keypair securely (overwrite before deletion)\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a cryptographically secure keypair\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList available keypairs\nLoad a keypair securely with validation\nCreate a new key validator\nCreate a new secure key storage\nSecure a keypair file by setting proper permissions\nStore a keypair securely\nCheck for adequate entropy in the key\nValidate keypair content for security issues\nValidate a keypair file for security issues\nBrowser launch error\nDashboard error types\nDashboard manager\nFile I/O error\nOther error\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate dashboard and open in browser\nGenerate and save dashboard HTML\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new dashboard manager\nOpen dashboard in default browser\nOutput directory for dashboard files\nSave a quick dashboard to the current directory and open it\nRun the dashboard with the given RPC client and commitment …\nCreate a real-time dashboard server (this would require an …\nDashboard title\n<code>ToString::to_string</code>, but without panic on OOM.\nVerbosity level\nSet dashboard title\nSet verbosity level\nBasic operations and errors\nDetailed operations\nNo debug output\nGlobal verbosity level\nEverything including internal state\nDebug verbosity levels\nReturns the argument unchanged.\nGet current verbosity level\nCalls <code>U::from(self)</code>.\nSet global verbosity level\nCheck if a verbosity level should be logged\nConfiguration for devnet proxy\nInformation about running proxy\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart a local RPC proxy to devnet\nStop the devnet proxy\nConfiguration for devnet RPC node\nInformation about a running devnet RPC node\nStatus information for devnet RPC node\nApply system tuning parameters (legacy function for …\nCheck the status of devnet RPC node\nExtract pubkey from solana-keygen output\nFind the agave-validator binary path\nFind the solana-keygen binary path\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart a devnet RPC node that syncs with real Solana devnet\nInternal function to start devnet RPC with tuning already …\nStart a devnet RPC node that syncs with real Solana devnet …\nStop the devnet RPC node\nIndividual check result\nMain diagnostic coordinator\nDiagnostic error types\nComprehensive diagnostic results\nDiagnostic summary\nHealth issue information\nHealth status levels\nIssue categories\nIssue severity levels\nNetwork connectivity health\nOverall system health status\nCheck build tools\nCheck available disk space\nCheck file permissions\nCheck Rust installation\nCheck Solana installation\nPerform comprehensive system health check\nNetwork connectivity diagnostics\nDetermine overall system status based on issues\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if the system has package updates available\nCheck if the system has Rust updates available\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the system is healthy overall\nGet missing build tools\nCreate a new diagnostic coordinator\nRollback validation and health verification\nPerform detailed diagnostic checks\nSystem health assessment utilities\n<code>ToString::to_string</code>, but without panic on OOM.\nVersion checking and compatibility utilities\nConnectivity test configuration\nSimple HTTP response representation\nSimple HTTP status representation\nNetwork test result\nSolana network endpoints\nCheck if we’re behind a firewall or proxy\nCheck overall network health\nCheck network health with custom configuration\nCheck Solana endpoints for detailed diagnostics\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake an HTTP request (using reqwest or similar)\nGet network latency to Solana endpoints\nTest a specific HTTP endpoint\nTest internet connectivity using reliable endpoints\nTest all Solana endpoints\nTest RPC functionality on Solana endpoints\nRollback validation result\nRollback validator for comprehensive system health …\nCheck that basic commands are working\nCheck configuration integrity\nCheck file system integrity\nCheck network connectivity\nCheck if package manager is functional\nCheck Rust toolchain functionality\nCheck Solana CLI functionality\nCheck that system services are running\nDisplay rollback validation results\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new rollback validator\nTest Rust compilation\nConvenience function for direct rollback validation\nValidate that rollback was successful and system is …\nSystem health analyzer\nAnalyze system health from collected data\nGenerate a health score (0-100)\nCheck file descriptor limits\nCheck a specific kernel parameter value\nCheck for performance-related issues\nCheck for security-related issues\nCheck system tuning parameters for Solana validator …\nDetermine overall system status based on issues\nReturns the argument unchanged.\nGet recommendations for improving system health\nGet health status as a descriptive string\nGet health status as a color-coded emoji\nCalls <code>U::from(self)</code>.\nCreate a new system health analyzer\nCurrent version matches required version\nVersion could not be compared (incompatible formats)\nCurrent version is newer than required\nCurrent version is older than required\nSemantic version representation\nVersion checker for system tools\nVersion comparison result\nVersion parsing and comparison errors\nVersion mismatch severity levels\nVersion requirement specification\nCheck if a version meets the requirements\nCompare two version strings\nExtract version from command output\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet recommended versions for common tools\nGet severity of version mismatch\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a version is compatible with a range\nCheck if a tool needs an update\nCreate a new version checker\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nConfiguration for eBPF program deployment\nResult of a deployment operation\nUtility module for deploying eBPF programs to Solana …\nCache for RPC clients to reduce DNS lookups and connection …\nPath to the eBPF binary file (.so)\nCalculate dynamic transaction fees based on current …\nSafe keypair cloning that returns proper error instead of …\nWhether to require confirmation for large binaries\nDeploy a BPF program to a Solana network\nDeploy a new BPF program using the upgradeable BPF loader\nThis function validates the deployment configuration and …\nDeploy eBPF program to a specific SVM network with …\nDisplay deployment results in the specified format\nDuration of deployment in milliseconds\nPath to deployment fee payer JSON file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOptional path to custom IDL JSON file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether to output results in JSON format\nLoad IDL from a JSON file or create a default one\nLoad eBPF program binary from file\nLoad program ID from a JSON file - supports both keypair …\nLoad program keypair from a JSON file - used for new …\nNetwork selection criteria (mainnet, testnet, devnet, or …\nPath to program owner JSON file\nPath to program address JSON file\nWhether to publish IDL\nPublish IDL for a deployed program\nNumber of retries attempted\nNumber of retry attempts for failed deployments\n<code>ToString::to_string</code>, but without panic on OOM.\nUpgrade an existing BPF program using the upgradeable BPF …\nValidate that program_id_path contains a keypair for new …\nCircuit breaker for preventing cascading failures\nGlobal error recovery manager\nSecurity-aware error boundary that prevents information …\nExecute an operation with circuit breaker protection\nExecute a function within an error boundary\nExecute a synchronous function within an error boundary\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet or create a circuit breaker\nGet the global error recovery manager\nHandle errors securely\nHandle panics securely\nGet health status of all circuit breakers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new secure error boundary\nCreate a new circuit breaker\nCreate a new error recovery manager\nRecord a failed operation\nRecord a successful operation\nRegister an error boundary\nManually reset the circuit breaker\nSanitize error messages to prevent information disclosure\nGet current circuit state\nBasic commands\nExample command with explanation\nCategory of examples\nNode deployment examples\nNode monitoring examples\nSVM management examples\nWorkflow examples (multiple commands)\nCategory this example belongs to\nCommand to run\nGet a description for a category\nDisplay examples for all categories\nDisplay examples for a specific category\nDisplay examples for a specific category by name\nGet the display name for a category\nExplanation of what the command does\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all examples\nGet examples by category\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTitle of the example\nBranch detection result\nGit repository manager with intelligent branch detection\nRepository metadata\nAdd user-defined branch override flags\nAttempt to clone a specific branch\nClone repository with intelligent branch selection\nDetect available branches from remote repository\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate intelligent branch priority list\nGet the default branch of the remote repository\nGet comprehensive repository metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnable or disable dynamic branch probing\nSet timeout for git operations\nCreate a new manager with custom branch preferences\nSafely validate and canonicalize a path to prevent …\nSanitize a string for safe use in shell commands\nValidate an identifier (e.g., server ID, tool name)\nValidate JSON input\nValidate a network name\nValidate a path without requiring it to exist yet\nValidate a port number\nValidate a URL string\nContainer isolation (shared kernel)\nError types for isolation operations\nIsolation level for a component\nMicroVM with hardware isolation\nNo isolation (development/testing only)\nProcess-level sandboxing\nTrusted Execution Environment\nUnikernel with minimal attack surface\nAuto-Scaling System for OSVM Components\nCertificate management for mTLS authentication\nComponent management for isolated execution\nConfiguration for isolation runtime\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if this level provides hardware isolation\nHot-Swap System for Zero-Downtime Updates\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet human-readable name\nZero-trust networking layer with mTLS\nOSVM Core Orchestration Layer\nPolicy engine for access control\nRuntime abstraction for different isolation technologies\nGet security score (0-100)\nTrusted Execution Environment (TEE) Support\n<code>ToString::to_string</code>, but without panic on OOM.\nvsock - Virtual Socket for VM-to-VM Communication\nAuto-scaler for managing component instances\nAuto-scaler configuration\nComponent metrics for scaling decisions\nNo action needed\nScale down by N instances\nScale up by N instances\nScaling decision\nScaling policy for a component type\nAdd a scaling policy for a component type\nAggregate metrics across multiple component instances\nAverage response latency (milliseconds)\nComponent ID\nComponent type this policy applies to\nGet component type name\nAuto-scaler configuration\nCooldown period after scaling action\nCPU utilization (0.0 - 1.0)\nEnable predictive scaling\nEvaluate all scaling policies\nEvaluate a single scaling policy\nHow often to evaluate scaling decisions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake scaling decision based on metrics\nMaximum instances\nMemory utilization (0.0 - 1.0)\nComponent metrics\nMinimum instances\nCreate a new auto-scaler\nOrchestrator for deploying/removing instances\nScaling configurations per component type\nRequest rate (requests/sec)\nScale down threshold (how much below target triggers …\nHow many instances to add/remove per action\nScale up threshold (how much above target triggers …\nSelect instances to remove (least loaded first)\nStart the auto-scaling loop\nTarget CPU utilization (0.0 - 1.0)\nTarget memory utilization (0.0 - 1.0)\nTarget request rate (requests/sec)\nLast update timestamp\nUpdate metrics for a component\nA certificate\nCertificate authority for issuing component certificates\nConfiguration for certificate authority\nCertificate manager for a component\nEnable automatic renewal\nCertificate authority for renewals\nPath to CA root certificate\nURL of step-ca server\nCached certificate\nCertificate storage directory\nPath to certificate file\nConfiguration\nDefault certificate validity in days\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet certificate (load if not cached)\nInitialize step-ca (for first-time setup)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if certificate is expired\nCheck if certificate is not yet valid\nCheck if certificate is currently valid\nIssue a certificate for a component\nPath to private key file\nLoad certificate from disk\nLoad private key\nMaximum certificate lifetime\nCheck if certificate needs renewal\nCheck if certificate needs renewal\nCreate a new certificate authority client\nCreate a new certificate manager\nParse certificate from PEM\nParse certificate from PEM\nGet certificate paths\nProvisioner name for certificate issuance\nProvisioner password (if required)\nRenew a certificate\nRenew certificate if needed\nRenewal threshold (renew when this much validity remains)\nRevoke a certificate\nSave certificate to disk\nVerify a certificate\nCreate with CA for automatic renewal\nCreate with default configuration\nSet provisioner password\nA component running in an isolated environment\nUnique identifier for a component\nComponent metadata\nRegistry of all components\nComponent status\nType of component\nComponent has failed\nMCP server\nOSVM Core orchestration service\nRPC node\nComponent is running\nRuntime handle for a running component\nGeneric service\nComponent is starting\nComponent is stopped\nComponent is stopping\nComponent is being upgraded\nSolana validator\nComponent type\nCount components\nAdditional runtime-specific data\nDescription\nCheck if component exists\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from UUID\nGet a component\nUnique identifier\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if component is operational\nCheck if component is security-critical\nCheck if component is transitioning\nIsolation configuration\nList all components\nList components by status\nList components by type\nMetadata\nGet human-readable name\nHuman-readable name\nCreate a new component registry\nCreate a new random component ID\nProcess ID (if applicable)\nRegister a new component\nRuntime handle (if running)\nSocket path for communication\nCurrent status\nAdditional key-value pairs\n<code>ToString::to_string</code>, but without panic on OOM.\nUnregister a component\nUpdate component status\nGet the underlying UUID\nVersion\nAMD SEV\nARM TrustZone\nIntel Cloud Hypervisor\nContainer\nContainer runtime options\nGoogle crosvm\nAWS Firecracker\nFirewall action\nFirewall rule\nFull network access\nHermitCore (Rust-based)\nHypervisor type for microVMs\nIntel SGX\nInternal network only (mTLS to other components)\nIsolation configuration for a component\nType of isolation\nMicroVM\nMirageOS (OCaml)\nNanos (Go/C support)\nNetwork access level\nNetwork configuration\nNetwork protocol\nNo isolation\nNo network access\nPort range\nProcess sandbox\nQEMU with KVM\nResource limits for a component\nRestricted external access (whitelist only)\nSecurity configuration\nTrusted Execution Environment\nTrusted Execution Environment type\nTraffic direction\nUnikernel\nUnikernel runtime\nOnly vsock to OSVM Core\nNetwork access type\nAllowed destinations (for restricted access)\nEnable ASLR\nEnable attestation\nCertificate validity in days\nAdditional runtime-specific options\nFirewall rules\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType of isolation to use\nGet the isolation level\nMaximum CPU cores\nMaximum disk space in MB\nMaximum execution time in seconds\nMaximum file descriptors\nMaximum memory in MB\nMaximum network bandwidth in Mbps\nMaximum processes\nEnable memory encryption (if available)\nEnable mTLS\nNetwork configuration\nRead-only root filesystem\nResource limits\nEnable secure boot\nSecurity options\nEnable stack canaries\nCleaning up old component\nCompleted\nDraining connections\nHot-swap failed and could not rollback\nRunning health checks\nConfiguration for hot-swap operations\nHot-swap manager for zero-downtime component updates\nResult of a hot-swap operation\nState of a hot-swap operation\nHot-swap failed and rolled back\nRolling back\nShifting traffic\nStarting new component\nHot-swap completed successfully\nWhether to automatically rollback on failure\nPerform canary deployment (gradual traffic shift)\nCheck if a component is healthy (single check)\nHot-swap configuration\nDrain connections from old component\nConnection drain timeout (how long to wait for connections …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHealth check interval (how often to check)\nRun health check loop until component is healthy or max …\nHealth check timeout (how long to wait for new component …\nPerform hot-swap of a component\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of health check attempts\nCreate a new hot-swap manager\nPerform health checks on new component\nComponent registry\nRollback to old component on failure\nRuntime manager for starting new components\nShift traffic from old to new component\nStart and register new component\nStop old component after successful hot-swap\nVerify old component is ready for hot-swap\nAny component\nA secure mTLS connection between components\nNetwork manager for zero-trust networking\nNetwork policy for connection authorization\nSpecific component ID\nAny component of a type\nZero-trust network interface\nAdd a network policy\nAuthentication status\nCA root certificate path\nEstablish connection between components with mTLS\nEstablish secure connection\nGet active connections count\nActive connections\nAdditional constraints\nGet destination component ID\nDestination component (or pattern)\nDestination component\nDisconnect components\nAllow or deny\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if connection is authenticated\nCheck if connection is allowed by policy\nCheck if component ID matches pattern\nMaximum message size in bytes\nRequire specific TLS version\nCreate a new network manager\nCreate a new zero-trust network\nNetwork policies\nRate limit (messages per second)\nReceive message over secure connection\nComponent registry (for type checking)\nSend message over secure connection\nGet source component ID\nSource component (or pattern)\nSource component\nUnderlying TCP stream (wrapped for mTLS)\nCreate network manager with component registry for type …\nHealth state for a component\nOSVM Core Orchestrator - central control plane\nOrchestrator configuration\nOrchestrator statistics\nService endpoint for service discovery\nAuto-restart failed components\nAuto-scale based on load\nCertificate authority\nCheck health of all components\nCheck health of a single component\nComponent ID\nOrchestrator configuration\nDeploy a new component\nDiscover services by name\nEnable service mesh (automatic mTLS between all components)\nExtract network address from component\nConsecutive failure count\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet service name from component type\nHandle unhealthy component (restart or replace)\nHealth check interval\nHealth check loop (runs periodically)\nHealth check state\nHealth status\nHealth status\nHot-swap manager\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast health check time\nLast error message\nList all components (for autoscaler)\nList components filtered by type name\nComponent restart threshold (how many failures before …\nMetadata\nNetwork address (for external access)\nNetwork manager (mTLS)\nCreate a new orchestrator\nRegister a service endpoint\nComponent registry\nRuntime manager\nScale component type to desired count\nService name (e.g., “rpc-node”)\nService discovery map\nStart the orchestrator (convenience method for non-Arc …\nStart the orchestrator (background tasks)\nGet orchestrator statistics\nStop a component\nStop and remove a component\nUnregister service endpoints for a component\nHot-swap a component (zero-downtime update)\nUpdate service endpoint (after hot-swap)\nvsock address (for VM-to-VM)\nvsock manager (VM-to-VM)\nAccess control policy\nPolicy engine for evaluating access control policies\nAdd a policy\nCheck if action is allowed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if action matches\nCheck if resource matches\nCheck if subject matches\nCreate a new policy engine\nRuntime abstraction for running components in isolated …\nRuntime manager that selects appropriate runtime based on …\nExecute command in component\nFirecracker MicroVM Runtime\nReturns the argument unchanged.\nGet runtime for isolation config\nGet component status\nHermitCore unikernel runtime implementation\nCalls <code>U::from(self)</code>.\nCheck if runtime is available on this system\nCheck if a specific runtime is available\nList available runtimes\nGet runtime name\nCreate a new runtime manager\nProcess-based runtime for development and testing\nRegister a runtime\nRestart a component\nStart a component\nStop a component\nCreate a runtime manager with default runtimes\nFirecracker runtime configuration\nA running Firecracker MicroVM instance\nFirecracker runtime implementation\nVM is paused\nVM is running\nVM is starting\nVM is stopped\nVM is stopping\nMicroVM configuration\nAPI socket path for controlling the VM\nKernel boot arguments\nComponent ID\nRuntime configuration\nConfigure network from isolation config\nCreate Firecracker configuration JSON\nDefault kernel image path\nDefault memory in MB\nDefault rootfs image path\nDefault vCPU count\nEnable vsock for VM-to-VM communication\nPath to firecracker binary\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate unique guest CID for vsock\nContext ID (unique per VM)\nGuest IP address\nHost IP address\nRunning MicroVM instances\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if Firecracker is available on the system\nCheck if a process is running\nJailer binary path (if use_jailer = true)\nKernel image path\nMemory size in MB\nNetwork interface configuration\nCreate a new Firecracker runtime\nProcess ID of firecracker process\nRoot filesystem image\nStart a new MicroVM instance\nVM state\nStop a MicroVM instance\nTAP device name\nUDS path for vsock\nEnable jailer for additional security\nNumber of vCPUs\nVM configuration\nGet VM configuration from component\nvsock configuration for VM-to-VM communication\nWorking directory for VM files\nConfiguration for HermitCore runtime\nA running HermitCore instance\nHermitCore runtime for unikernel execution\nMaximum boot timeout\nBuild a unikernel image from source\nComponent ID\nRunning components\nConfiguration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPath to hermit binary\nImage path\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPath to kernel image\nEnable KVM acceleration\nMemory in MB\nCreate a new HermitCore runtime\nProcess handle\nStart a unikernel instance\nStart time\nStatus\nStop a unikernel instance\nCPU cores to allocate\nEnable verbose logging\nProcess-based runtime (no isolation)\nRunning components\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new process runtime\nAMD SEV (Secure Encrypted Virtualization)\nARM TrustZone\nAttestation report proving enclave integrity\nEnclave is being created\nEnclave has been destroyed\nEnclave is being destroyed\nSecure enclave instance\nEnclave state\nIntel SGX (Software Guard Extensions)\nHandle to key stored in enclave\nEnclave is initialized and ready\nEnclave is executing code\nTEE configuration\nTEE Manager - manages secure enclaves\nTEE statistics\nTEE technology type\nNumber of active enclaves\nAttestation enabled\nAttestation service URL\nCheck if AMD SEV is available\nCheck if Intel SGX is available\nComponent ID this enclave belongs to\nTEE configuration\nCreate a new enclave for a component\nDestroy an enclave\nEnable remote attestation\nEnable sealed storage\nEnclave ID (from TEE runtime)\nEnclave ID containing the key\nEnclave ID\nActive enclaves\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate unique enclave ID\nGenerate unique key ID\nGenerate validator key inside enclave\nGet attestation report for enclave\nCalls <code>U::from(self)</code>.")