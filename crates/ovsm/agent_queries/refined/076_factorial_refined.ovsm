;; Query: Calculate factorial of 5 using accumulator pattern
;; Category: Advanced - Iterative Algorithms
;; Expected: 120 (integer)
;; Demonstrates: Loop accumulator pattern, range iteration, mutation

;; Factorial: n! = 1 * 2 * 3 * ... * n
;; For n=5: 5! = 1 * 2 * 3 * 4 * 5 = 120

(define n 5)              ;; Input: number to calculate factorial of
(define factorial 1)       ;; Accumulator: starts at identity (1 for multiplication)

;; Accumulator pattern:
;; 1. Initialize accumulator to identity value
;; 2. Loop over range of values
;; 3. Update accumulator with each iteration
;; 4. Return final accumulator value

(for (i (range 1 (+ n 1)))  ;; Range from 1 to n (inclusive)
  ;; Multiply accumulator by current number
  (set! factorial (* factorial i)))

;; Loop iterations:
;; i=1: factorial = 1 * 1 = 1
;; i=2: factorial = 1 * 2 = 2
;; i=3: factorial = 2 * 3 = 6
;; i=4: factorial = 6 * 4 = 24
;; i=5: factorial = 24 * 5 = 120

factorial  ;; Result: 120

;; Alternative approaches:
;; - Recursive (more elegant but not tail-recursive in OVSM)
;; - Reduce pattern (when available): (reduce * 1 (range 1 6))

;; Time complexity: O(n)
;; Space complexity: O(1)
