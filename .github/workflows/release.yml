name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Centralized maintainer information - can be overridden in repository secrets
  OSVM_MAINTAINER_NAME: "OpenSVM"
  OSVM_MAINTAINER_EMAIL: "rin@opensvm.com"

jobs:
  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libusb-1.0-0-dev libudev-dev pkg-config libssl-dev perl
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      
      - name: Build release binary
        run: cargo build --release
        working-directory: .
      
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: osvm-binary
          path: target/release/osvm

  create-github-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: osvm-binary
          path: ./
      
      - name: Make binary executable
        run: chmod +x ./osvm
      
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: ./osvm
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-apt:
    name: Deploy to APT Repository
    needs: create-github-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: osvm-binary
          path: ./
      
      - name: Make binary executable
        run: chmod +x ./osvm
      
      - name: Set up Debian packaging environment
        run: |
          sudo apt-get update
          sudo apt-get install -y debhelper dh-make devscripts dpkg-dev
      
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cargo rustc libudev-dev libusb-1.0-0-dev
      
      - name: Create Debian package
        run: |
          # Get version by stripping 'v' prefix from tag
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          cd packaging/debian
          ./build-deb.sh "$VERSION"
          
      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: osvm-deb-package
          path: packaging/debian/debian-packages/*.deb
      
      - name: Deploy to APT repository
        run: |
          # TODO: Implement actual APT repository deployment
          # This is a placeholder for the actual APR repository deployment
          # In a real scenario, you would use a service like Launchpad or a custom APT repository
          echo "Deploying to APT repository..."
          # Example: scp debian-packages/osvm_*.deb user@apt-repo:/path/to/repo/
          # Then update the repository index

  deploy-termux:
    name: Deploy Termux Package
    needs: create-github-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: osvm-binary
          path: ./
      
      - name: Make binary executable
        run: chmod +x ./osvm
      
      - name: Set up Termux packaging environment
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev
      
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cargo rustc libudev-dev libusb-1.0-0-dev
      
      - name: Create Termux package structure
        run: |
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          cd packaging/termux
          ./build-termux.sh "$VERSION" aarch64
          
      - name: Upload Termux package
        uses: actions/upload-artifact@v4
        with:
          name: osvm-termux-package
          path: packaging/termux/*.deb

  deploy-archlinux:
    name: Deploy ArchLinux Package
    needs: create-github-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create ArchLinux PKGBUILD
        run: |
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          cd packaging/archlinux
          ./build-arch.sh "$VERSION"
      
      - name: Upload ArchLinux package files
        uses: actions/upload-artifact@v4
        with:
          name: osvm-archlinux-package
          path: |
            packaging/archlinux/PKGBUILD
            packaging/archlinux/.SRCINFO
      
      - name: Submit to AUR (placeholder)
        run: |
          # TODO: Implement actual AUR submission
          # This is a placeholder for the actual AUR submission
          # In a real scenario, you would clone the AUR repository and update the PKGBUILD
          echo "Submitting to AUR..."
          # Example steps:
          # git clone ssh://aur@aur.archlinux.org/osvm.git
          # cp packaging/archlinux/PKGBUILD packaging/archlinux/.SRCINFO osvm/
          # cd osvm && git add . && git commit -m "Update to ${VERSION}" && git push

  deploy-homebrew:
    name: Deploy to Homebrew
    needs: create-github-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master
      
      - name: Create Homebrew formula
        run: |
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          SHA=$(curl -sL https://github.com/${{ github.repository }}/archive/${{ github.ref_name }}.tar.gz | shasum -a 256 | cut -d ' ' -f 1)
          
          cat > osvm.rb << EOF
          class Osvm < Formula
            desc "OpenSVM CLI tool for managing SVM nodes"
            homepage "https://github.com/${{ github.repository }}"
            url "https://github.com/${{ github.repository }}/archive/${{ github.ref_name }}.tar.gz"
            sha256 "$SHA"
            version "$VERSION"
            
            depends_on "rust" => :build
            
            def install
              system "cargo", "build", "--release"
              bin.install "target/release/osvm"
            end
            
            test do
              system "#{bin}/osvm", "--version"
            end
          end
          EOF
      
      - name: Upload Homebrew formula
        uses: actions/upload-artifact@v4
        with:
          name: osvm-homebrew-formula
          path: ./osvm.rb
      
      - name: Submit to Homebrew
        run: |
          # TODO: Implement actual Homebrew submission
          # This is a placeholder for the actual Homebrew submission
          # In a real scenario, you would create a PR to homebrew-core or a custom tap
          echo "Submitting to Homebrew..."
          # Example: Create a PR to homebrew-core with the formula

  deploy-cargo-doc:
    name: Deploy to cargo doc
    needs: create-github-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libusb-1.0-0-dev libudev-dev pkg-config libssl-dev perl
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal
          toolchain: stable
      - name: Generate documentation
        run: cargo doc --no-deps --document-private-items
        working-directory: .
      
      - name: Create index.html
        run: |
          echo '<meta http-equiv="refresh" content="0; url=osvm/index.html">' > target/doc/index.html
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          force_orphan: true

  publish-to-crates:
    name: Publish to crates.io
    needs: create-github-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libusb-1.0-0-dev libudev-dev pkg-config libssl-dev perl
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      
      - name: Verify build
        run: cargo build --release
        working-directory: .
      
      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }} --allow-dirty
        working-directory: .
        env:
          CARGO_TERM_COLOR: always
